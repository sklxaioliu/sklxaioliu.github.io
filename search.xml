<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高畅云工作日记</title>
      <link href="/2022/09/27/GCY/"/>
      <url>/2022/09/27/GCY/</url>
      
        <content type="html"><![CDATA[<h4 id="各个账号域名及账号密码"><a href="#各个账号域名及账号密码" class="headerlink" title="各个账号域名及账号密码"></a>各个账号域名及账号密码</h4><ul><li><p><a href="https://dhr.guangyaal.com:8368/GCYDHR/index.do">https://dhr.guangyaal.com:8368/GCYDHR/index.do</a>    账号：admin  密码：GCY!@#$   广亚</p></li><li><p><a href="http://jinlingfan.gicp.net:4999/GCYDHR/index.do">http://jinlingfan.gicp.net:4999/GCYDHR/index.do</a>   账号：admin  密码：GCY!@#$   金羚</p></li><li><p><a href="https://www.mydigitalcloud.cn/GCYDHR/index.do">https://www.mydigitalcloud.cn/GCYDHR/index.do</a>     账号：100    密码：654321    反馈</p></li><li><p><a href="https://www.mydigitalcloud.cn:88/GCYDHR/login.jsp">https://www.mydigitalcloud.cn:88/GCYDHR/login.jsp</a> 账号：administrator    密码：GCYgcy@@@123 测试</p></li><li><p><a href="https://www.mydigitalcloud.cn:88/GCYDHR/index.do">https://www.mydigitalcloud.cn:88/GCYDHR/index.do</a>  账号：admin  密码：GCYgcy@@@123  标准库</p></li><li><p>运维工具   账号：gcyyh2   密码：gcyyh2456  </p></li><li><p>运维工具   练习账号:lgl   密码: 123456</p></li><li><p><a href="https://gcy.mydigitalcloud.cn:88/GCYDHR/index.do">https://gcy.mydigitalcloud.cn:88/GCYDHR/index.do</a>  账号：admin   密码：GCY_Test_lx    测试地址</p></li><li><p>120.78.148.196    账号名：sa   密码：GCY_test@2022         测试地址所属数据库  </p></li><li><p>FileZilla  ip：192.168.1.88  用户名：JSB   密码：GCYjsb2021@    端口：21</p></li></ul><h4 id="组织、人事、合同、权限模块"><a href="#组织、人事、合同、权限模块" class="headerlink" title="组织、人事、合同、权限模块"></a>组织、人事、合同、权限模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">组织：这个模块主要分成 组织管理、组织架构、职务体系、岗位体系4个部分</span><br><span class="line"></span><br><span class="line">组织管理：里面的行政组织和虚拟组织可以  可以用学校来进行类比    </span><br><span class="line">         行政组织可以理解为学校以及学校里面分的系部</span><br><span class="line">         虚拟组织可以理解为学校中的学生会 团委会（一般客户那边有基金会的说法）</span><br><span class="line"></span><br><span class="line">         用户关系下还可以设置组负责人，相当于部门负责人</span><br><span class="line">         </span><br><span class="line">   组织维度：重点是组织维度权限，组织一定要在这里授权到某个人身上才会看到前面行政组织这边的一个内容，如果没有在这边进行授权的话看到的就会是一个空白的内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">组织架构：</span><br><span class="line">         失效：应用场景是新建了一个组织，应用于当前的环境，但是后面正式化了之后，可能会有新的更加规范组织出现，就会把原有的组织失效掉，新建一个组织</span><br><span class="line"></span><br><span class="line">         组织调动：怎么把原有组织的人调到新的组呢，就需要用到组织调动了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">职务体系和岗位体系：</span><br><span class="line">         有了前面的组织架构之后，就有了职务和岗位，他们两是有一定关联的，需要注意的是职级和职等，这两个是跟薪资挂钩的，</span><br><span class="line">         一般用户的话是二选一，用其中一个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">怎么建立组织部门，设置组负责人，组织维度</span><br><span class="line">   1.年度规划编制：每一个岗位这年打算招多少人，如果人满了可能会不能入职</span><br><span class="line">   2.月度规划编制：每一个月某个岗位需要扩编的话可以设置，可设置生效时间和失效时间的时间段</span><br><span class="line">   3.月度编制：根据扩编的情况产生的，最终受到管控就是以月度编制表有没有超编</span><br><span class="line"></span><br><span class="line">人事：记录员工的入转调离</span><br><span class="line">   1. 员工入职登记，扫一个二维码可以进入系统</span><br><span class="line">   2. 员工档案，真正入职的档案就是在这里</span><br><span class="line">   3. 转正管理，如果员工符合转正条件可以在转正管理进行操作</span><br><span class="line">   4. 人事异动，如果某个员工晋升或者是调岗可以在这里进行操作</span><br><span class="line">   5. 离职申请，提交离职流程</span><br><span class="line">1-5是人事的主模块，6-12是其他的人事模块，可根据客户的实际情况进行开通</span><br><span class="line">   </span><br><span class="line">   6. 工伤管理，登记工伤</span><br><span class="line">   7. 个人奖惩，员工的奖励和惩罚</span><br><span class="line">   8. 员工证件，员工的证件记录</span><br><span class="line">   9. 亲属管理，了解某个员工在厂里面有没有亲戚关系的员工</span><br><span class="line">   10.离职员工关怀，显示所以离职人员的资料</span><br><span class="line">   11.人员诚信库（黑名单），如果记录了信息，再次入职会提醒有黑名单历史，影响再入职</span><br><span class="line">   12.证件打印，打印员工证件用的</span><br><span class="line"></span><br><span class="line">`需要注意的点是，在调整一个人的岗位的时候，最好不要在员工档案那边直接编辑，应该去人事异动去更改，区别是前者不会知道是在什么时间晋升的，后者有完整的异动申请单，在填写完异动单之后最好检查确认一下，因为一旦提交是不可逆转的`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">合同关系：劳动合同的签订 ，分固定期（长期的劳动合同），合同期限是按月来算的，劳动合同如果续签上一份合同会直接作废</span><br><span class="line">   1. 合同管理，可以看看合同有没有到期，离职可以选择解除合同</span><br><span class="line">   2. 员工档案那边也可以选择其他进行离职处理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">权限：系统是双重权限，既根据人的权限也根据这个人所在的角色范围权限有关</span><br><span class="line">   1. 权限管理，分用户类型和用户列表</span><br><span class="line">   2. 用户类型，选择可以看到哪些模块 </span><br><span class="line">   3. 用户列表，可以通过添加用户组来选择可看到什么部门</span><br><span class="line">用户类型和用户列表的优先级是     用户列表&gt;用户类型</span><br></pre></td></tr></table></figure><p>认识表,以及表字段，关联属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">组织表：OS_GROUP          DIM_ID_=<span class="string">&#x27;1&#x27;</span> (代表的意思是行政组织，可理解为从最大的组织里面查询)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">员工档案表：W_EMP_INFO    F_SPLZ=<span class="string">&#x27;0&#x27;</span>(代表的意思是是否离职，0代表否的意思，这段代码的意思就是在职的)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">岗位表：W_STATION         F_SPSX=<span class="string">&#x27;0&#x27;</span>(代表的意思是是否失效，0代表的意思是否，这段代码的意思就是有效的)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">合同表：W_HTGL            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">职称管理表：W_ORG_ZCGL    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以调用石经理写的存储过程来查看表结构</span><br><span class="line">EXEC PSZH_SELECT_TABLE <span class="string">&#x27;里面是需要查询的表名字&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>####初次尝试存储过程的编写（夜班补贴管理）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">需求分析：</span><br><span class="line">1.  首先得判断该员工上的是否上夜班</span><br><span class="line"></span><br><span class="line">    F_SGSJ&lt;=20:00:00</span><br><span class="line">F_XGSJ&gt;=08:00:00(第二天)</span><br><span class="line"></span><br><span class="line">2.  如果是夜班，上夜班时长&gt;10小时    直接补贴55     上夜班时长&lt;2小时   夜班补贴=0            </span><br><span class="line"></span><br><span class="line">    F_GS&gt;=10  夜班补贴=55</span><br><span class="line">F_GS&lt;=2   夜班补贴=0</span><br><span class="line">    </span><br><span class="line">3.  2小时&lt;上夜班时长&lt;10小时    夜班补贴计算公式为   55÷12×上班时长</span><br><span class="line"> </span><br><span class="line">    2&lt;=F_GS&lt;=10    夜班补贴为  55÷12×上班时长</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">思路：夜班补贴表拿的是日考勤表的字段，多了一个夜班补贴  </span><br><span class="line"></span><br><span class="line">1.查询夜班补贴所有字段   w_PSM_ZS_YBBT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ID_         主键</span><br><span class="line">REF_ID_     外键</span><br><span class="line">PARENT_ID_   父ID</span><br><span class="line">F_CQRQ     出勤日期</span><br><span class="line">F_CXMC     产线名称ID</span><br><span class="line">F_CXMC_NAME 产线名称</span><br><span class="line">F_XM     姓名</span><br><span class="line">F_GH     工号ID</span><br><span class="line">F_GH_NAME 工号</span><br><span class="line">F_SGGXMC 上岗工序名称ID</span><br><span class="line">F_SGGXMC_NAME上岗工序名称</span><br><span class="line">F_GS     工时</span><br><span class="line">F_SGSJ     上岗时间</span><br><span class="line">F_XGSJ     下岗时间</span><br><span class="line">F_JJLX     计件类型ID</span><br><span class="line">F_JJLX_NAME 计件类型</span><br><span class="line">F_YBBT     夜班补贴</span><br><span class="line">F_BZ     备注</span><br><span class="line">INST_ID_ 流程实例ID</span><br><span class="line">INST_STATUS_ 状态</span><br><span class="line">TENANT_ID_ 租户ID</span><br><span class="line">CREATE_TIME_ 创建时间</span><br><span class="line">CREATE_BY_ 创建人ID</span><br><span class="line">UPDATE_BY_ 更新人</span><br><span class="line">UPDATE_TIME_ 更新时间</span><br><span class="line">CHECK_STATUS_审核状态</span><br><span class="line">CHECK_BY_ 审核人</span><br><span class="line">CHECK_TIME_ 审核时间</span><br><span class="line">GROUP_ID_ 组ID</span><br><span class="line">F_JBF     加班费</span><br><span class="line"></span><br><span class="line">2.先创建一个临时表@temp</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alter PROCEDURE PGL_YB             --创建一个存储过程</span><br><span class="line"></span><br><span class="line">@KSRQ SMALLDATETIME,               --声明变量，这两个其实是日期框的值</span><br><span class="line">@JSRQ SMALLDATETIME</span><br><span class="line"></span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line"> SET NOCOUNT ON</span><br><span class="line">  DECLARE @RetVal int = 0</span><br><span class="line">           ,@RetMsg varchar(5000)       --安全备份</span><br><span class="line">-------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">DECLARE @SBJS   SMALLDATETIME  --声明变量上岗时间</span><br><span class="line">DECLARE @XBSJ   SMALLDATETIME  --声明变量下岗时间</span><br><span class="line">DECLARE @GDYBBT NUMERIC(14,5)  --定义一个夜班补参数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET   @SBJS = <span class="string">&#x27;19:00&#x27;</span></span><br><span class="line">SET   @GDYBBT =55/12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DECLARE @TEMP TABLE(        --先创建一个临时表，因为是从日考勤那边拿数据，临时表会比创建新表更加便捷</span><br><span class="line">  ID INT IDENTITY (1,1),</span><br><span class="line">  F_CQRQ DATETIME,          --出勤日期</span><br><span class="line">  F_CXMC_NAME VARCHAR(100), --产线名称 </span><br><span class="line">  F_XM VARCHAR(100),        --姓名</span><br><span class="line">  F_GH_NAME VARCHAR(100),   --工号,</span><br><span class="line">  F_GS NUMERIC,             --工时,</span><br><span class="line">  F_SGSJ SMALLDATETIME,     --上岗时间,</span><br><span class="line">  F_XGSJ SMALLDATETIME,     --下岗时间,</span><br><span class="line">  F_JJLX_NAME VARCHAR(100), --计件类型,</span><br><span class="line">  F_YBBT NUMERIC,             --夜班补贴,</span><br><span class="line">  F_BZ VARCHAR(100),        --备注,</span><br><span class="line">  CREATE_TIME_ DATETIME,    --创建时间,</span><br><span class="line">  CREATE_BY_ VARCHAR(100)   --创建人</span><br><span class="line">)</span><br><span class="line">INSERT INTO @TEMP(          --！！！特别注意这边插入数据的时候   INSERT INTO  下面select from的表才是插入到临时表里的数据</span><br><span class="line">  F_CQRQ,                --出勤日期</span><br><span class="line">  F_CXMC_NAME,           --产线名称 </span><br><span class="line">  F_XM,                  --姓名,</span><br><span class="line">  F_GH_NAME,             --工号,</span><br><span class="line">  F_GS,                  --工时,</span><br><span class="line">  F_SGSJ,                --上岗时间,</span><br><span class="line">  F_XGSJ,                --下岗时间,</span><br><span class="line">  F_JJLX_NAME,           --计件类型,</span><br><span class="line">  F_YBBT,                  --夜班补贴,</span><br><span class="line">  F_BZ,                  --备注,</span><br><span class="line">  CREATE_TIME_ ,         --创建时间,</span><br><span class="line">  CREATE_BY_             --创建人</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">SELECT                                 ---因为是从日考勤这边拿的数据，所以from日考勤的表  将里里面的数据传给临时表</span><br><span class="line">  F_CQRQ,   --出勤日期</span><br><span class="line">  F_CXMC_NAME, --产线名称 </span><br><span class="line">  F_XM,   --姓名,</span><br><span class="line">  F_GH_NAME,  --工号,</span><br><span class="line">  F_GS,   --工时,</span><br><span class="line">  F_SGSJ,   --上岗时间,</span><br><span class="line">  F_XGSJ,   --下岗时间,</span><br><span class="line">  F_JJLX_NAME, --计件类型,</span><br><span class="line">  0,   --夜班补贴,</span><br><span class="line">  F_BZ,   --备注,</span><br><span class="line">  CREATE_TIME_ , --创建时间,</span><br><span class="line">  CREATE_BY_  --创建人</span><br><span class="line">  FROM w_PSM_ZS_RKQ</span><br><span class="line">  WHERE F_CQRQ BETWEEN @KSRQ AND @JSRQ    --这边的条件是出勤日期要在选的日期之间</span><br><span class="line">  AND CONVERT(varchar,F_SGSJ,8)&gt;=@SBJS    --然后这个意思是截取上岗日期的前八位后的时间  要大于定义的上班时间 判断是上的夜班</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  SELECT * FROM w_PSM_ZS_YBBT  WHERE F_CQRQ BETWEEN @KSRQ AND @JSRQ</span><br><span class="line">  --这个意思是从表里面先查到这些数据</span><br><span class="line">  DELETE   FROM w_PSM_ZS_YBBT  WHERE F_CQRQ BETWEEN @KSRQ AND @JSRQ</span><br><span class="line">  --如果查到了的话讲原来的数据删除掉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  --删除完成之后就可以插入新的数据了，从数据从哪里来呢，从刚被赋值的@temp临时表里面来</span><br><span class="line">  </span><br><span class="line">  INSERT INTO w_PSM_ZS_YBBT(</span><br><span class="line">  ID_ ,</span><br><span class="line">  F_CQRQ,   --出勤日期</span><br><span class="line">  F_CXMC_NAME, --产线名称 </span><br><span class="line">  F_XM,   --姓名,</span><br><span class="line">  F_GH_NAME,  --工号,</span><br><span class="line">  F_GS,   --工时,</span><br><span class="line">  F_SGSJ,   --上岗时间,</span><br><span class="line">  F_XGSJ,   --下岗时间,</span><br><span class="line">  F_JJLX_NAME, --计件类型,</span><br><span class="line">  F_YBBT,   --夜班补贴,</span><br><span class="line">  F_BZ,   --备注,</span><br><span class="line">  CREATE_TIME_ , --创建时间,</span><br><span class="line">  CREATE_BY_  --创建人</span><br><span class="line">  )</span><br><span class="line">  SELECT </span><br><span class="line">  NEWID(),</span><br><span class="line">  F_CQRQ,   --出勤日期</span><br><span class="line">  F_CXMC_NAME, --产线名称 </span><br><span class="line">  F_XM,   --姓名,</span><br><span class="line">  F_GH_NAME,  --工号,</span><br><span class="line">  F_GS,   --工时,</span><br><span class="line">  F_SGSJ,   --上岗时间,</span><br><span class="line">  F_XGSJ,   --下岗时间,</span><br><span class="line">  F_JJLX_NAME, --计件类型,</span><br><span class="line">  0,   --夜班补贴,</span><br><span class="line">  F_BZ,   --备注,</span><br><span class="line">  CREATE_TIME_ , --创建时间,</span><br><span class="line">  CREATE_BY_  --创建人</span><br><span class="line">  FROM @TEMP</span><br><span class="line">  WHERE F_CQRQ BETWEEN @KSRQ AND @JSRQ    --这边的条件是出勤日期要在选的日期之间</span><br><span class="line">  AND CONVERT(varchar,F_SGSJ,8)&gt;=@SBJS</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"> UPDATE w_PSM_ZS_YBBT SET F_YBBT = CASE WHEN F_GS&gt;10 THEN  55 </span><br><span class="line">  ELSE   CASE WHEN F_GS &lt;2 THEN 0</span><br><span class="line">  ELSE   F_GS*@GDYBBT END</span><br><span class="line">  END</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXEC PGL_YB <span class="string">&#x27;2022-09-21&#x27;</span>,<span class="string">&#x27;2022-09-23&#x27;</span>     --最后调用即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excel笔记</title>
      <link href="/2022/09/01/Excel/"/>
      <url>/2022/09/01/Excel/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">蔸藜的Excel</span><br></pre></td></tr></table></figure><p><code><pre><br>1.快速填充<br>  选中单元格-选择填充-序列-选择行或者列-类型-终止值<br>      快捷键     向右填充（ctrl+R）   向下填充（ctrl+D）   快速填充（ctrl+E）</p><p>2.行列的快速操作<br>  自动调整列宽和行宽<br>      可以选中需要调整的行和列，快速双击中间的黑色十字即可自动调整</p><p>3.移动和复制列<br>  点击需要移动的列，将鼠标放到中间位置出现黑色十字时按快捷键即可<br>      快捷键     移动（按住ctrl拖动即可）    复制（按住ctrl+shift拖动）<br>      添加列（ctrl+shift+=）       删除列（ctrl+-）</p><p>4.如何快速选择表格区域<br>  4.1可以先定位到表格的第一个单元格按住ctrl+shift键  配合小键盘上的向右向下即可选择<br>  4.2点选法，可以先选择表格的第一个单元格，按住shift键再选中最后一个单元格即可<br>  4.3定义名称法，首先选中需要定义的数据，在名称框里填写名称即可</p><p>5.如何进行数据格式设置<br>  右键-设置单元格格式-选择想要的格式<br>  ctrl+1快速调出单元格格式设置<br>  直接原则单元格格式</p><p>6.文本格式和数字格式的区别<br>  文本格式有个显著的特点是左边对齐，左上角会有绿色小三角<br>  数字格式是右边对齐</p><p>7.定位<br>  1.如何定位两列的不同？<br>    excel可以使用ctrl+\快捷键来使用 但是wps不行，只能ctrl+G找内容差异单元格  或者F5调出选择定位条件也可</p><p>  2.什么是常量（处理公式以外全可以理解为常量）</p><p>  3.如何筛选出空的单元格？<br>    可以使用F5先调出定位条件，再使用空值点击确定即可全部定位，可以在其中一个单元格里面填0，再按ctrl+Enter键即可全部填充</p><p>  4.如何快速选中可见单元格？<br>    快捷键Alt+;即可排除隐藏单元格</p><p>  5.怎么利用定位批量填充？<br>    常见问题是合并单元格的转化 ，先选中合并的单元格-取消合并居中-按ctrl+G-选择空值确定-编辑栏里面输入等于<br>    -需要模仿填充哪一列数据的位置-ctrl+Ecter即可</p><p>  6.怎么批量删除空行<br>    首先可以选中需要操作的区域-ctrl+G-选中空值确定-在任意一个空值单元格上右键-选中删除整行即可</p><p>8.批量查找和替换快捷键（ctrl+H）<br>  1.一列中全部都有回车占行需要全部消除怎么办？<br>    只需要选中这一列-ctrl+H-查找内容选择ctrl+J-替换内容为即可</p><ol start="2"><li></li></ol><p></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学linux</title>
      <link href="/2022/09/01/ChuXueLinux/"/>
      <url>/2022/09/01/ChuXueLinux/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如何给虚拟机中的linux设置外网</span><br></pre></td></tr></table></figure><p><code><pre><br>1.需要检查windows系统中网络-更改适配器设置-保障vmnet8是已启用模式<br>2.打开虚拟机-编辑-虚拟网络编辑器-选择vmnet8-设置子网ip-点击net设置-设置网关-点击确定<br>3.去linux系统终端里面使用终端敲命令-首先需要切换root用户才有权限更改网关信息<br>4.输入vi /ect/sysconfig/network-scripts/ifcfg-ens33<br><img src="/images/linux1.jpg" width="400" height="200"  ><br>6.按一下i 才能编辑 编制好之后按ecs退出编辑模式 在按下：wq！回车保存成功<br>7.重启网络 systemctl restart network<br>8.ifconfig里面查看ip<br>9.验证  在windows系统中可以ping一下设置的ip<br>10.最后一步，在虚拟机中点击虚拟机选项--网络适配器-添加网络适配器-选择nrt模式-确认即可</p><p></code></pre></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">什么是SecureCRT</span><br></pre></td></tr></table></figure><p><code><pre><br>SecureCRT是一款支持SSH的终端仿真程序（在windows的系统里面远程操作linux系统）<br>需要激活和配置<br>输入对应linux的静态ip 和用户名 以及密码<br>如果需要设置对应的字体大小颜色以及背景色 可以在options -session options-terminal-appearance里面设置<br></code></pre></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CentOS文件和目录</span><br></pre></td></tr></table></figure><p><code><pre><br>1./      表示系统中的根目录<br>2.etc   系统中的配置文件<br>3.bin   系统预设执行文件的放置目录<br>4.sbin  系统预设执行文件的放置目录<br>5.user  系统预设执行文件的放置目录<br>6.var    var/long程序运行日志的存放目录</p><p></code></pre></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">怎么设置时间同步</span><br></pre></td></tr></table></figure><p><code><pre><br>1.打开虚拟机右键装好的虚拟机-选择设置-选项-点击vmware tools-选择将客户机时间与主机同步勾选-确定<br></code></pre></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">克隆与快照（系统备份）</span><br></pre></td></tr></table></figure><p><code><pre><br>1.什么是克隆<br>完全复制原来系统，当原系统不能正常使用时，克隆的系统可以正常使用（占用空间较大）<br>2.怎么克隆<br>打开虚拟机右键装好的虚拟机-选择管理-克隆-需要将原来系统关机-选择安装位置即可<br><br><br>3.什么事快照<br>相当于给原先系统当时的状态拍了一张照片，如果原来系统崩溃是不能单独使用的（占用空间小）<br>4.怎么拍摄和还原快照<br>打开虚拟机右键装好的虚拟机-选择快照-拍摄快照-取快照的名字（最好跟上时间和描述）<br>.打开虚拟机右键装好的虚拟机-选择快照-快照管理器-选择需要恢复的快照-转到-确认恢复即可<br></code></pre></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">系统与设置命令</span><br></pre></td></tr></table></figure><p><code><pre><br>1.账号管理（需要管理员的权限 root）<br>useradd  用户名  （创建用户）<br>passwd   用户名  （用户密码，不能低于8位，不能是回文）<br>usermod 用户名  （修改用户，一般是usermod -l 修改后的名字 原来的名字）<br>userdel   用户名  （删除用户，一般是userdel -r -f 需要删除的用户名 [-r是删除主目录和邮件池][-f 是强制删除]）<br><br><br>2.用户组（需要管理员的权限 root）<br>groupadd  用户组名   创建用户组<br>groupmod 用户组名   修改用户组（一般是groupmod -n 新名称  旧名称      [-n是改名为新的用户名]）<br>groups       用户名      查询用户所在组<br>groupdel   用户组名   删除用户组<br><br><br>3.管理用户组内成员<br>gpasswd  组名（gpasswd是linux下的管理工具，用于将一个用户添加到组或者从组中删除）<br><br><br>-a  添加用户到组（语法是 gpasswd -a 需要添加的用户名   用户组）<br>如果需要查看组中的用户可使用（grep ‘需要查看的组’/etc/group）<br>-d  从指定租删除用户<br>-A  指定管理员<br>-M 指定组成员和-A的用途差不多<br>-r   删除密码<br>-R  限制用户登入组，只有组中的成员才可以用newgrp加入组<br><br><br>4.日期管理（date）<br>-d<字符串>：显示字符串所指的日期和时间。字符串前后必须加上双引号；<br>-s<字符串>：（需要管理员权限）根据字符来设置日期和时间。字符串前后必须加上双引号；<br>-u ：显示GMT;（英国格林威治的时间，北京时间是CST）<br>-longname:   显示登录账号信息<br>--help  :在线帮助<br>--version  ：显示版本信息<br><br><br>5.用户切换  su命令<br>su -c ls root   （意思是先切换到root用户执行ls命令 再回到原先用户）<br>6.id （查看当前用户的详细信息）<br><br><br>7.sudo  （提升用户权限）<br><br><br>8.top （显示linux实时进程状态）<br>top-c    实现显示所有进程信息（显示完整命令）<br>top-p   pid     实时显示指定的进程信息<br>结束监控快捷键  q<br><br><br>9.ps     查看进程信息（显示当前系统正在运行的进程信息）<br>ps-A展示所有的进程信息<br>ps-ef 比ps-A展示的进程信息更加全面<br>ps-u  可以查看指定用户的进程信息<br><br><br>10.kill命令（杀死进程）<br>kill 进程的pid  （杀死指定pid的进程）<br>kill -9 进程pid   （强制指定pid的进程）<br>killall -u 用户名 （杀死指定用户所有的进程）<br><br><br>11.shutdown 关机命令（需要管理员权限一般是一分钟后关机）<br>shutdown -c  取消关机<br>shutdown -h  now  立即关机<br>shutdown +1 “一分钟之后关机”<br>shutdown -r +1  “一分钟之后关机并重启”<br><br><br>11.reboot  立马重启命令<br><br><br>12.who 命令  （查看那些人还在登录系统）<br>who -H   显示明细<br>13.timedatectl  校正服务器时间、时区<br>timedatectl list-timezone （查看所有可用时区 结束按q）<br>timedatectl set-timezone  “Asia/Shanghai”（设置时区[上海]）<br>timedatectl set-ntp true  （电脑连网之后会自动同步服务器时间）<br>14.clear 清除命令（其实是把其他的数据顶到上面去）<br><br><br><br><br>15.目录管理命令<br>ls               列出目录<br>ls -a           显示所有文件和目录（包含隐藏文件）<br>ls -d           仅列出目录本身，而不是列出目录内的文件数据（常用）<br>ls -l            长串数据列出，包含文件的属性与权限等等数据（常用）<br>-a -l 可以一起使用  即-al       显示所有文件的详细信息<br><br><br>cd              切换目录<br>pwd           显示当前目录<br>mkdir         创建新目录<br>rmdir          删除空目录<br>cp               复制文件或目录<br>rm              删除文件或目录<br>mv              移动文件或目录以及修改文件或目录名字<br></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql</title>
      <link href="/2022/08/12/MySQL/"/>
      <url>/2022/08/12/MySQL/</url>
      
        <content type="html"><![CDATA[<p>基础篇</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">蔸藜的MySql笔记</span><br></pre></td></tr></table></figure><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>&#x2F; 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &amp;#124;&amp;#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表&#x2F;修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null unique,</span><br><span class="line">age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">status char(1) default &#x27;1&#x27;,</span><br><span class="line">gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-x2F-更新行为"><a href="#删除-x2F-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除&#x2F;更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &#x27;销售部&#x27;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));</span><br></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：&#x3D;, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log&#x3D;1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time&#x3D;2<br>更改后记得重启MySQL服务，日志文件位置：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session&#x2F;global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain &#x2F; desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（&#x3D;、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &#x27;Arm&#x27;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;&#x3D;或者&lt;&#x3D;来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; &#x3D; M和 1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)&#x2F;8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Grant Table Column</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td align="left">Synonym for “all privileges”</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td align="left"><code>Alter_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td align="left"><code>Alter_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td align="left"><code>Create_priv</code></td><td align="left">Databases, tables, or indexes</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td align="left"><code>Create_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td align="left"><code>Create_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td align="left"><code>Create_tablespace_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td align="left"><code>Create_tmp_table_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td align="left"><code>Create_user_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td align="left"><code>Create_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td align="left"><code>Delete_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td align="left"><code>Drop_priv</code></td><td align="left">Databases, tables, or views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td align="left"><code>Drop_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td align="left"><code>Event_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td align="left"><code>Execute_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td align="left"><code>File_priv</code></td><td align="left">File access on server host</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td align="left"><code>Grant_priv</code></td><td align="left">Databases, tables, or stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td align="left"><code>Index_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td align="left"><code>Insert_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td align="left"><code>Lock_tables_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td align="left"><code>Process_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td align="left">See <code>proxies_priv</code> table</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td align="left"><code>References_priv</code></td><td align="left">Databases or tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td align="left"><code>Reload_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td align="left"><code>Repl_client_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td align="left"><code>Repl_slave_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td align="left"><code>Select_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td align="left"><code>Show_db_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td align="left"><code>Show_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td align="left"><code>Shutdown_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td align="left"><code>Super_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td align="left"><code>Trigger_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td align="left"><code>Update_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td align="left">Synonym for “no privileges”</td><td align="left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td align="left">Dual password administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td align="left">Allow queries blocked by audit log filter</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td align="left">Audit log administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td align="left">Backup administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td align="left">Clone administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td align="left">Redo log archiving administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td align="left">NDB Cluster</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td align="left">Server administration</td></tr></tbody></table><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT table_schema &quot;Database Name&quot;</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/08/12/linux/"/>
      <url>/2022/08/12/linux/</url>
      
        <content type="html"><![CDATA[<p>基础篇</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">蔸藜的linux笔记</span><br></pre></td></tr></table></figure><pre><code>1. 使用普通账户来管理 Linux 主机的资源,当需要系统功能修改的时候，再使用 root 账户  2. Linux 为多人多工的系统,在关机之前可下查询系统在线者(who)或查询网络服务(netstat -a)    使用正确的关机方式，可以使用 shutdown 命令3. 使用 man/info 命令查询命令帮助文档4. chgrp/chown/chmod  修改文档所属群组/拥有者/权限5. 文档权限: r(读)=4 w(写)=2 x(执行)=1 rwx=4+2+1=7 ，权限顺序 owner group others    文档 x 权限是可执行,目录 x 权限是可进入6. Linux 文档/目录名长度限制 255bytes7. 文件,目录相关操作命令    cd dir-name: 切换目录    pwd : 显示当前目录    mkdir dir-name: 创建目录 eg: mkdir test1    rmdir dir-name : 删除空目录 eg: rmdir test1    touch file-name : 新建文件    ls [option]: 列出当前目录下的文件和目录        常用：        ls -a : 全部文档,包括隐藏文档         ls -l : 显示文档的属性(权限,所属,大小,时间等)        ls -t : 依照时间顺序        ls -r : 反向输出    cp [option] source(源文件/目录) target(目标文件/目录) : 复制  eg : cp test1/note.txt test2/        常用:        -a : 相当于 -dr 全部的意思        -d : 复制对象为链接(link file),则复制链接,而非文档本身        -i : 如果目标文档已经存在,则在覆盖之前有提示        -p : 联通文档的属性(权限,用户,时间)一起复制过去        -r : 递归持续复制,用于目录的复制,复制目录,连同目录内所有    rm [option] file/dir 删除        -f 强制删除        -i 删除前提示        -r 递归删除(用于删除目录)    mv [option] source(源文件/目录) target(目标文件/目录)   移动/更名 文件/目录        -f 强制移动         -i 文件覆盖提醒        -u 如果目标文件已经存在,且 source 比较新,才会更新(update)8. 文档查看命令(尤其在日志查询方面很重要)    cat [option] finame-name : 从第一行显示文档内容        -n : 显示行号(包括空白行)        -b 查询前 n 行数据,去除空白行 eg: cat -b 10 text.log         cat -n file-name | grep "string" 在 file-name 文件中显示和 "string" 附近的数据(很重要,根据关键字查询日志)        sed -n '/2014-12-17 16:17:20/,/2014-12-17 16:17:36/p' test.log  (按照日期查询数据) 在 test.log 中查询这两个时间点之间的数据        grep '2014-12-17 16:17:20' test.log (按照日期查询数据) 在 test.log 中查询这个时间点的日志(通常用于确认这个时间点是否存在)    tac file-name : 从最后一行开始显示文档(反向显示)    nl [option] file-name : 有行号的显示文档(类似 cat -n ,但是不给空白行编号)    maore file-name : 从第一行开始一页一页的查看文档        space(空格键): 向下翻一页        Enter: 向下一行        /String : 在显示的内容中查找 "String"        :f : 显示文档名以及当前的行数        q : 退出        b (或者 [Ctrl] + b) : 向前翻页,但是只对文档有用,对管线无用    less filen-ame : 一页一页显示文档,与 more 类似,但是可以向前翻页        space(空格键) : 向下翻动一页        [pagedown] : 向下翻动一页        [pageup] : 向上翻动一页        /String : 向下搜索 "String"        ?String : 项上搜索 "String"        n : 重复前一个搜索(与 「/」/「?」有关)        N : 反向重复前一个搜索(与 「/」/「?」有关)        g : 跳转到资料第一行        G : 跳转到最后一行        q : 退出    head [option] file-name : 查看文档前几行(默认 10 行)        -n : 查看的行数 eg: head -n 20  test.txt     tail [option] file-name : 查看文档的后几行(默认 10 行)        -n : 查看的行数 eg: tail -n 20  test.txt        -f : 表示持续监测文档后边的数据,只有按 [Ctrl + c] 才能停止 (在监控日志输出的时候常用)        tail -n 50 -f test.log (前两个命令的组合) 显示 test.log 文件的后 50 行数据，并在文件内容增加后，自动显示新增的文件内容    touch [option] file-name 创建/修改 文档时间        文档时间:         access time(atime): 文档被读取,则会更新这个时间        status time(stime): 文刚状态(eg: 权限)修改时,则会更新这个时间        modification time(mtime): 文档内容变更时,则会更新这个时间                 -a : 修改 access time         -c : 修改文档时间,若文档不存在,则新建        -d : 后边可以接欲修订的日期而不用当前的日期        -m : 仅修改 mtime        -t : 后边可以接与修订的日期而不用当前的日期,格式: [YYYYMMDDhhmm]9. 文件查询    whereis [option] file/dir : 查询文档/目录        -l : 列出 whereis 查询的目录以及查询结果        -b : 只找 binary 格式的文档(二进制文件)        -m : 只找在说明文档 manual 路径下的文档        -s : 只找 source 目录下文档        -u : 搜索不在以上三个目录下的其他特殊文档    locate [option] file/dir : 查询文档/目录 (locate 是在资料库中查找,资料库会有更新频率,如果是在资料库更新之后创建的文档,则无法搜索到            可以手动更新资料库 updatedb ,自动更新频率设置: /etc/updatedb.conf )        -i : 忽略大小写        -c : 不输出文档名,仅计算找到的文档数量        -l : 仅输出几行的意思，例如输出五行则是-l 5        -S ：输出locate 所使用的资料库文档的相关资讯，包括该资料库纪录的文档/目录数量等        -r ：后面可接正规表示法的显示方式    find [PATH] [option] file/dir : 查询文档/目录        参数说明:        9.1 与时间有关的选项：共有-atime, -ctime 与-mtime ，以-mtime 说明           -mtime n ：n 为数字，意义为在n 天之前的『一天之内』被更动过内容的文档；           -mtime +n ：列出在n 天之前(不含n 天本身)被更动过内容的文档；           -mtime -n ：列出在n 天之内(含n 天本身)被更动过内容的文档。           -newer file ：file 为一个存在的文档，列出比file 还要新的文档        9.2 与使用者或群组名称有关的参数：           -uid n ：n 为数字，这个数字是使用者的帐号ID，亦即UID ，这个UID 是记录在                    /etc/passwd 里面与帐号名称对应的数字。           -gid n ：n 为数字，这个数字是群组名称的ID，亦即GID，这个GID 记录在                    /etc/group           -user name ：name 为使用者帐号名称           -group name：name 为群组名称           -nouser ：寻找文档的拥有者不存在/etc/passwd 的文档           -nogroup ：寻找文档的拥有群组不存在于/etc/group 的文档！        9.3 与文档权限及名称有关的参数：           -name filename：搜索文档名称为filename 的文档；           -size [+-]SIZE：搜索比SIZE 还要大(+)或小(-)的文档。这个SIZE 的规格有：                           c: 代表byte， k: 代表1024bytes。           -type TYPE ：搜索文档的类型为TYPE 的，类型主要有：一般正规文档(f), 装置文档(b, c),                           目录(d), 连结档(l), socket (s), 及FIFO (p) 等属性。           -perm mode ：搜索文档权限值为 mode 的文档            -perm -mode ：搜索全部包含 mode 权限的文档           -perm /mode ：搜索包含 mode 中任一权限的文档        9.4 额外可进行的动作：           -exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜索到的结果。           -print ：将结果打印到屏幕上10. 查看磁盘信息/磁盘分割/磁盘挂载    df [option] : 列出整体磁盘使用量(也可以看到磁盘挂载信息)        -h : 根据大小使用适当格式显示,eg:kBytes,Mbytes,Gbytes        -i : 不使用磁盘容量,而是用 inode 数量显示磁盘使用情况    du [option] file/dir : 显示文件/目录所占用的磁盘大小        -s : 列出磁盘占用总量,而不列出每个目录占用的磁盘容量        -h : 根据大小使用适当格式显示,eg:kBytes,Mbytes,Gbytes    lsblk : 列出本机磁盘容量信息,可以看到磁盘的分区以及各分区大    parted device-name print : 查看磁盘分割表类型(MBR/GPT)与分割信息 eg: parted /dev/sda print    gdisk : GPT分区格式的磁盘分区工具        常用指令:         d : 删除一个分区        n : 添加一个分区        p : 打印分割表        q : 不保存退出        w : 保存并退出        ? : 菜单    fdisk : MBR分区格式的磁盘分区工具        常用命令和 gdisk 相同    partprobe [option]: 更新磁盘分区表(partprobe 归属 parted 包下,在使用 gdisk/fdisk 将磁盘分区之后,并没有立刻更新分区表,        需要重启或者使用 partprobe 命令更新分区表)        -s : 显示磁盘分区信息(不加 s 则不显示)    mkfs : 格式化磁盘(磁盘分割之后需要对其进行格式化, mkfs:make fliesyatem,即制作文件系统 如:ext2/3/4/xfs/vfat等 ,具体参数可参考网络)         eg:mkfs.xfs /dev/sda4  将sda4盘格式化为 xfs 文件系统    mount : 挂载 (内容较多,具体操作可参考网络)        挂载注意事项:             (1) 同一个文件系统不要重复挂载在不同的挂载点            (2) 单一目录不要挂载多个文件系统            (3) 挂载点要为空目录        eg: mount /dev/sr0 /mnt/cdrom : 将 CD/DVD 挂载到 /mnt/cdrom 目录下(过载DVD可以使用 loop 方式挂载)    umount [option] dev-name/mount-point: 卸载,通过 设备名/挂载点        -f : 强制卸载        -n : 不更新 /etc/mtab 情况下卸载        eg : umount /mnt/cdrom : 将挂载在 /mnt/cdrom 目录下的设备卸载    开机挂载设置目录: /etc/fstab /etc/mtab (具体设置参考网络)       11. 文件链接 link (不能跨文件系统(filesystem))    ln [option] source target : 创建文件链接(hard link 不支持目录)        -s : 创建的是 symbolic link(相当于 windows 快捷方式),不加 -s 相当于 hard link 12. 终端运行结果输出    一般情况下,终端运行结果输出在屏幕,但是如果输出结果较多,则前边的输出结果就会看不到(在纯命令行的 Linux系统中)    为解决这个问题,可以将输出结果保存到文件中    (1) > file-name : 将「本次」运行结果只输出到文件(默认文件会保存在当前工作目录,文件存在则会覆盖)        eg: ll / > ll.txt    (2) tee : 可以将「本次」运行结果输出到屏幕同时保存到文件        tee [option] file-name : 将本次命令运行的结果显示在屏幕,同时输出到文件(默认文件会保存在当前工作目录,文件存在则会覆盖) eg: ll / | tee ll.txt        -a : 解决上边文件覆盖问题,将数据结果追加到文件后边            eg: ll / | tee -a ll.txt    (3) script : 可以将终端的所有输出(包括「多次」的 命令+运行结果)都保存到文件中(默认文件会保存在当前工作目录,文件存在则会覆盖)        使用方法:             开启script: $ script -- 开始记录 -- 结束 script : $ exit         说明: 默认会在当前工作目录生成一个 typescript 文件,文件存在会覆盖        -a : 解决文件覆盖问题,将数据结果追加的文件后边  eg: script -a script.txt        -f : 刷新输出,实时记录        -q : 不显示 script 的启动与退出信息(用户不知道在录屏)        -t : 显示输出的时间    13. Linux 设置 swap 虚拟内存(用途: 防止服务器遇到程序内存占用过高情况,具体设置参考网络)14. 文件压缩    14.1 gzip [option] file-name : gzip 解/压缩(gzip 可以打开compress/zip/gzip 等软件压缩的文档, gzip 压缩的文件后缀为 .gz,压缩后会将源文件删除)        -c : 将压缩的资料输出到屏幕(实测一堆乱码)        -d : 解压缩        -t : 检验压缩文件的一致性(用于判断文件是否有误        -v : 显示压缩比等信息        -# : # 表示数字,设置压缩等级, 1 最快,压缩比最差, 9 最慢,压缩比最好, 默认为 6             eg: gzip -c test.txt  将 test.txt 文件压缩    14.2 bzip2 [option] file-name : bzip2 解/压缩(bzip2 压缩率高于 gzip, 支持保留源文件)        -c : 将压缩的资料输出到屏幕(实测报错)        -d : 解压缩        -k : 保留源文件压缩        -v : 显示压缩比等信息        -# : 同 gzip (实测小文件看不出对比效果)    14.3 xz [option] file-name : xz 解/压缩        -c : 将压缩的资料输出到屏幕        -d : 解压缩        -k : 保留源文件压缩        -l : 列出压缩文件的而相关信息        -v : 显示压缩比等信息        -# : 同 gzip (实测小文件看不出对比效果)    14.4 tar [option] target-file source-file : 打包与解/压缩        -c : 建立打包文件        -t : 打包时查看打包文件包含的文件信息         -x : 解包/解压缩        -z : 通过 gzip 进行解/压缩(文件名建议设置为 *.tar.gz)        -j : 通过 bzip2 进行解/压缩(文件名建议设置为 *.tar.bz2)        -J : 通过 xz 进行解/压缩(文件名建议设置为 *.tar.xz)(-z -j -J 不能同时出现在一串命令行中)        -v : 将解/压缩过程中处理的文件名显示出来        -f : 后边要立刻接需要处理的文件名(一般将其放在最后)        -C : 将压缩文件解压缩到指定目录            eg: tar -Jcvf /home/test.tar.xz /home/text/                  tar -Jxvf /home/text.tar.xz15. 系统备份(xfs文件系统)    15.1 xfsdump [option] [file/dir] : 使用 xfsdump 对 xfs 文件系统进行备份        -L : 系统备份的标签(给系统备份打标签,便于记忆)        -M : 对备份资料的简易说明         -l : (L的小写)备份等级,包含 0~9(默认为 0 ,完整备份)        -f : 后边接备份文件名         -I : 列出当前系统备份的信息(存放目录: /var/lib/xfsdump/inventory)         注意事项: xfsdump 只能备份已经挂载的文件系统                  xfsdump 必须使用 root 身份操作                  xfsdump 只能备份 xfs 文件系统                  xfsdump 备份的资料只能使用 xfsrestore 解析                  xfsdump 是根据文件系统的 UUID 来进行备份的(不能备份具有相同 UUID 的文件系统)            eg: xfsdump -l 0 -L boot_backups -M boot_backups -f /srv/boot.dump /boot     15.2 xfsrestore [option] [file/dir] : 使用 xfsrestore 对 xfs 文件系统进行还原        -L : 系统备份的标签(Session Label)        -f : 后边接备份文件名        -I : 查看备份信息(同 xfsdump -I 功能)        -i : 进入互动模式(执行每一步都有反馈,高级管理员使用,一般不用)        -s : 还原特定文件/目录 eg: xfsrestore -f /srv/boot.dump -L boot_backups -s test.txt /boot 只将boot.dump备份文件中的 test.txt 文件            还原到 /boot 目录(前提是 boot.dump 本分文件中要有 test.txt 文件)        累积还原操作同完整还原: 操作顺序 level0 -- level1 -- level2 ......16. 其他备份工具    16.1 dd : dd if="input-file" of="output-file" bs="block-size" count="number"            if : inpout file,输入文件/挂载的设备            of : output file,输出文件/挂载的设备            bs : 每个 block 的大小(默认 512 bytes)            count : block 的数量        dd 备份特点: 会将整个文件系统(或整个盘)备份,不区分磁盘内的文件系统,都可以备份/还原,可用于备份 iso 文件    16.2 cpio [option] >/< [file/frvice] : 备份/还原           备份参数:                -o : 将资料 copy 输出到文件/设备               -B : 将预设的 blocks 可以增加到 5120bytes(预设默认为 512bytes)               >  : 备份符号            还原参数:                          -i : 将资料从备份文件/设备中复制到系统中                -d : 自动创建目录(使用 cpio 所备份的资料文件不一定会在同一层目录中,一次需要进 cpio 还原时自动创建新目录)                -u : 自动将新文件覆盖旧文件                -t : 配合 -i,查看以 cpio 建立的文件/设备的内容            公共参数:                 -v : 显示备份/还原过程                -c : 新的 porttable format 方式存储            eg: find boot | cpio -ovcB > file/device : (要在 / 目录下)将 /boot 目录下所有文件备份                cpio -ivcdu < file/device : 还原                cpio -ivct < file/device : 查看            cpio 备份特点: (1)不区分绝对路径/相对路径 (2)需要借助其他命令辅助(比如 find),才能创建需要备份的文件    17. 文本编辑器vi/vim    17.1 一般模式(vi/vim刚打开一个文件时即为一般模式)        [Ctrl] + [f] : 下一页(相当于[PageDown])        [Ctrl] + [b] : 上一页(相当于[PageUp])        0 : 将光标移动到光标所在行的第一列(数字 0)        $ : 将光标移动到光标所在行的末尾        G : 将光标移动到文档最后        gg : 将光标移动到文档开头        n+[Enter] : n 为数字,将光标向下移动 n 行        /String : 在文档中向下搜索 "String" 的字符串(区分大小写,下同)        ?String : 在文档中向上搜索 "String" 的字符串        n : (字母 n )配合查找 /String ?String 跳转到下一个指定位置        :n1,n2s/word1 /word2/g : n1 与 n2 为数字,在第 n1 与 n2 列之间查找 word1 这个字符串，并将该字符串替换为 word2               :1,$s/word1/word2/g : 从文档第一行到最后一行查找 word1 字符串,并将改字符串替换为 word2        :1,$s/word1/word2/gc : 从文档第一行到最后一行查找 word1 字符串,并将改字符串替换为 word2,在替换之前提示是否替换        x : 向后删除一个字符(相当于 [Delete])        X : 向前删除一个字符(相当于 windows 中的 Backspace)        dd : 删除光标所在行        ndd : 删除从光标向下 n 行(包括光标所在行)        yy : 复制光标所在行        nyy : 复制从光标开始向下 n 行        p : 张贴        u : 撤销,后退        [Ctrl] + r : 前进    17.2 编辑模式(文档可插入模式,点击 i 可由一般模式进入编辑模式,按 [Ecs] 退出编辑模式,进入一般模式)        -i : 进入编辑模式,从光标处插入    17.3 命令模式(由一般模式按 ":" 进入)        :q : 退出        :w : 保存        :wq : 保存并退出        :q! : 不保存退出        :w! : 不保存        :set nu : 显示行号        :set nonu : 不显示行号    17.4 块区选择        v : 字符选择,游标经过的地方会被选中(游标向下,上一行全被选中,相当于 windows 的 shift)        V : 行选择,游标经过的行会被选中        [Ctrl] + v : 块选择,游标经过的地方会被选中(游标向下,只会选中游标包含的部分,类似于多行编辑)        y : 复制选中        p : 粘贴选中        d : 删除选中    17.5 多文档编辑(1 单窗口)        :n : 编辑下一个文档        :N : 编辑上一个文档        :files : 列出当前 vim 打开的文档        使用 vim 开启多文档 : vim file1 file2 ... filen    17.6 多文档编辑(2 多窗口)        :sp [filename] : 开启多窗口, 后边不接文件,则两个窗口显示同一文件(同步显示);后边接文件,新窗口打开新文件        [Ctrl] + [W] + [up]/k : 切换到上边的窗口([up] 为向上键,按键方式: 先按 [Ctrl],再按 [w],再按其他,并非同步,下同)        [Ctrl] + [W] + [down]/j : 切换到下边的窗口        vim 开启多窗口: 在已经打开的 vim 窗口中,命令模式下 按 :sp [filename] 进入多窗口    17.7 代码提示        [Ctrl] + [x] -- [Ctrl] + [n] : 根据文件的内容来提示代码        [Ctrl] + [x] -- [Ctrl] + [f] : 根据文件名来提示代码(不常用)        [Ctrl] + [x] -- [Ctrl] + [o] : 根据文件后缀名来提示代码            17.8 vim 环境设置与历史记录        /etc/vimrc : vim 的系统设置文件(不建议修改,用户自定义可以在自己的 home 目录建立一个 .vimrc)        ~/.viminfo : 当前用户使用 vim 的历史记录(包括操作的文档,使用的命令等等,文件在用户自己的 home 目录,每个用户的 home 目录不同)    17.9 vim 其他        (1) vim 程序被中断,则会生成 .filename.swp 文档,下次代开的时候根据需要进进行操作即可(不用担心突然断电等导致 vim 编辑的文档没有保存)        (2) vim 中文乱码,设置 Linux 语言编码(支持中文的有big5/utf8),文件位置: /etc/locale.conf        (3) vim 设置文本编码 set ff=unix  2. shell    18.1 bash        ~/.bash_history : 使用 bash 的历史记录(在使用者的 home 目录下)       命令补全 : 在输入一个不完整指令的时候按下 [Table] 键可以补全确定唯一的命令,如果根据输入的不完整指令不能确定唯一指令                   则可以双击 [Table] 查看所有的可能指令       设置别名(alias) : alias ll="ls -l" (仅限于本用户本次登录)       type [option] command : 查看命令是否为 bash 内置命令           -a : 将所有包含该 command 命令的路径都显示出来,包括 alias 和 PATH 中定义的       \ : 转译字符(eg: 按下\+_[Enter] 则是换行,而不是执行)       echo : 打印信息,输出信息 eg: echo $PATH       变量设定 : name='hahaha' (注意单双引号区别,单引号过滤特殊字符属性;双引号保留特殊字符原有属性)        取消变量 : unset name       取变量 : $name       PS1变量: 由于设置命令行前边的显示属性,具体设置可参考网络                 eg: [ljq@learn ~ 02:03 #82]$       ​    </code></pre><h3 id="19-Linux-命令行目录提示不区分大小写"><a href="#19-Linux-命令行目录提示不区分大小写" class="headerlink" title="19 Linux 命令行目录提示不区分大小写"></a>19 Linux 命令行目录提示不区分大小写</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;set completion-ignore-case on&quot;</span> &gt;&gt; .inputrc</span><br><span class="line"><span class="built_in">source</span> .inputrc</span><br></pre></td></tr></table></figure><p>然后重新登陆(不需要重启)  </p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实施第二站—上海优层智能</title>
      <link href="/2022/08/12/youceng/"/>
      <url>/2022/08/12/youceng/</url>
      
        <content type="html"><![CDATA[<p>优层智能科技是一家位于上海紫竹科技园的初创型公司，公司的主营业务为基于人工智能算法的工业解决方案，旨在以人工智能算法为核心，为传统工业提供整体智能解决方案。公司司由国内国外、各行业精英团队组成，结合人工智能图像算法，传统图像算法，服务真实工业场景，紧密结合行业现实、客户需求，提供定制化系统解决方案。通过将最前沿AI技术引入传统行业，推动智能生产，实现产业升级。这是我的实习第二站.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">我们在义乌晶科初次见面，开始了新的篇章</span><br></pre></td></tr></table></figure><img src="/images/yc4.jpg" width="600" height="400" > <img src="/images/yc2.jpg" width="600" height="400" > <img src="/images/yc1.jpg" width="600" height="400" > More info: 开始总是最懵懂的时候，带着对未来的期待和现在的无知启程了真正的实施.<br><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">从懵懂到独挡一面（义乌晶科-义乌晶澳-滁州晶科-尖山晶科-上饶晶科）</span><br></pre></td></tr></table></figure><img src="/images/yc5.jpg" width="600" height="400"  > <img src="/images/yc7.jpg" width="600" height="400"  > <img src="/images/yc8.jpg" width="600" height="400"  > <img src="/images/yc9.jpg" width="600" height="400"  > <img src="/images/yc10.jpg" width="600" height="400"  > More info: 义乌晶科是温室，义乌晶澳是磨练，滁州晶科是成长,尖山晶科是考场，上饶晶科是离别<br><br><img src="/images/ch1.jpg" width="600" height="400"  > <img src="/images/ch2.jpg" width="600" height="400"  > <img src="/images/ch3.jpg" width="600" height="400"  > <img src="/images/ch4.jpg" width="600" height="400"  > <img src="/images/ch5.jpg" width="600" height="400"  > <img src="/images/ch6.jpg" width="600" height="400"  > <img src="/images/ch7.jpg" width="600" height="400"  > <img src="/images/ch8.jpg" width="600" height="400"  > <img src="/images/ch9.jpg" width="600" height="400"  > <img src="/images/ch10.jpg" width="600" height="400"  > <img src="/images/ch11.jpg" width="600" height="400"  > <p>More info: 大厂的实施不是想象中的那么简单，我负责的主要项目是层后外观，主要负责公司软件系统的安装，上线、调试、现场升级和维护，及时发现潜在问题，保证系统正常运行，以及线扫相机和扫码枪的安装调试，流水线信号对接.</p><p>More info: 层后外观项目，核心是线扫相机的成像给AI系统进行识别，再通过扫码枪扫到的条码和图片进行对应，如何保障扫到的条码和电池组件能对应的上就需要通过系统和流水线信号的对接来完成，<br><br><br><br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">说起来总是很简单，但是过程总是很难，但我知道坚持学习总会</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SqlServer</title>
      <link href="/2022/08/12/SqlServer/"/>
      <url>/2022/08/12/SqlServer/</url>
      
        <content type="html"><![CDATA[<h3 id="日期时间型数据类型"><a href="#日期时间型数据类型" class="headerlink" title="日期时间型数据类型"></a>日期时间型数据类型</h3><img src="/images/sql时间类型的函数.png" width="700" height="400" > <h3 id="数字型数据类型"><a href="#数字型数据类型" class="headerlink" title="数字型数据类型"></a>数字型数据类型</h3><img src="/images/数字数据类型.png" width="700" height="400" > <h3 id="浮点型数据类型"><a href="#浮点型数据类型" class="headerlink" title="浮点型数据类型"></a>浮点型数据类型</h3><img src="/images/浮点型数字类型.png" width="700" height="100" > <h3 id="字符串型数据类型"><a href="#字符串型数据类型" class="headerlink" title="字符串型数据类型"></a>字符串型数据类型</h3><img src="/images/字符串数据类型.png" width="700" height="200" > <h2 id="快捷方法"><a href="#快捷方法" class="headerlink" title="快捷方法"></a>快捷方法</h2><h3 id="两种删除表中全部数据的方法"><a href="#两种删除表中全部数据的方法" class="headerlink" title="两种删除表中全部数据的方法"></a>两种删除表中全部数据的方法</h3><ul><li><p><code>TRUNCATE TABLE NAME（需要操作的表名） 删除表中所有的行，而不记录单个行删除操作 </code></p></li><li><p><code>DELETE FROM TABLENAME(需要操作的表名) WHERE 1=1 </code></p></li></ul><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><ul><li><p>sqlserver视图视频链接：<br><a href="https://www.bilibili.com/video/BV1C5411G7ng/?spm_id_from=333.337.search-card.all.click&amp;vd_source=743263c30c547641c97c9c6e51a119bf">https://www.bilibili.com/video/BV1C5411G7ng/?spm_id_from=333.337.search-card.all.click&amp;vd_source=743263c30c547641c97c9c6e51a119bf</a></p></li><li><p>sqlserver触发器视频链接：<br><a href="https://www.bilibili.com/video/BV1Wk4y1R7SY/?spm_id_from=333.337.search-card.all.click&amp;vd_source=743263c30c547641c97c9c6e51a119bf">https://www.bilibili.com/video/BV1Wk4y1R7SY/?spm_id_from=333.337.search-card.all.click&amp;vd_source=743263c30c547641c97c9c6e51a119bf</a></p></li><li><p>sqlserver游标视频链接：<br><a href="https://www.bilibili.com/video/BV1Vk4y1R7mJ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=743263c30c547641c97c9c6e51a119bf">https://www.bilibili.com/video/BV1Vk4y1R7mJ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=743263c30c547641c97c9c6e51a119bf</a></p></li></ul><h3 id="黄宇写的检索某个级别的组织的函数"><a href="#黄宇写的检索某个级别的组织的函数" class="headerlink" title="黄宇写的检索某个级别的组织的函数"></a>黄宇写的检索某个级别的组织的函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dbo.fXN_DCZXBM(F.F_SZZZ,4) IS  NOT NULL     这个是黄宇写的获取某一级别组织的标量值函数</span><br></pre></td></tr></table></figure><p>函数所在位置如下：<br><img src="/images/黄宇函数.png" width="700" height="250" ></p><ul><li>用法如下：<img src="/images/黄宇函数用法.png" width="700" height="250" ></li></ul><h3 id="石哥写的查表结构的存储过程"><a href="#石哥写的查表结构的存储过程" class="headerlink" title="石哥写的查表结构的存储过程"></a>石哥写的查表结构的存储过程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PSZH_SELECT_TABLE &#x27;需要查询字段的表&#x27;           这个是石哥写的查看表字段的存储过程</span><br></pre></td></tr></table></figure><ul><li>用法如下：<img src="/images/石哥存储过程用法.png" width="700" height="250" ></li></ul><h3 id="日常用的多的函数"><a href="#日常用的多的函数" class="headerlink" title="日常用的多的函数"></a>日常用的多的函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONVERT(需转换成的数据类型, 字段)         一般用于转型和截取字符串长度</span><br><span class="line"></span><br><span class="line">ROUND(需四舍五入的值,保留几位小数)        一般用于取舍入的值</span><br><span class="line"></span><br><span class="line">DATENAME(dw,需要查询的日期)              一般用于来查询某个日期是星期几</span><br><span class="line"></span><br><span class="line">LEN（需要返回的字段）                    一般用来返回字符的长度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">left（name,4）截取左边的4个字符</span><br><span class="line">列：</span><br><span class="line">SELECT LEFT(201809,4) 年</span><br><span class="line">结果：2018</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">right（name,2）截取右边的2个字符</span><br><span class="line">例：</span><br><span class="line">SELECT RIGHT(201809,2) 月份</span><br><span class="line">结果：09</span><br><span class="line"></span><br><span class="line">这三个函数的结合妙用</span><br><span class="line">例：</span><br><span class="line">create table aaa</span><br><span class="line">(</span><br><span class="line">ceshiziduan   varchar(50)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into aaa(ceshiziduan) values (&#x27;1(失效)&#x27;),(&#x27;122213(失效)&#x27;),(&#x27;15797944(失效)&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from aaa</span><br><span class="line"></span><br><span class="line">select SUBSTRING(ceshiziduan,1,(len(ceshiziduan)-len(RIGHT(ceshiziduan,4)))) from  aaa</span><br><span class="line">可以将一个字段最后的想截取调的字段，如这里的（失效）</span><br></pre></td></tr></table></figure><h3 id="截取字符串函数-SUBSTRING"><a href="#截取字符串函数-SUBSTRING" class="headerlink" title="截取字符串函数-SUBSTRING"></a>截取字符串函数-SUBSTRING</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUBSTRING(name,5,3) 截取name这个字段 从第五个字符开始 只截取之后的3个字符</span><br><span class="line">例：</span><br><span class="line">SELECT SUBSTRING(“成都融资事业部”,5,3)</span><br><span class="line">结果：事业部</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUBSTRING(name,3) 截取name这个字段 从第三个字符开始，之后的所有个字符</span><br><span class="line">例：</span><br><span class="line">SELECT SUBSTRING(“成都融资事业部”,3)</span><br><span class="line">结果：融资事业部</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUBSTRING(name, -4) 截取name这个字段的第 4 个字符位置（倒数）开始取，直到结束</span><br><span class="line">例：</span><br><span class="line">SELECT SUBSTRING(“成都融资事业部”,-3)</span><br><span class="line">结果：事业部</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUBSTRING(name, -4，2) 截取name这个字段的第 4 个字符位置（倒数）开始取，只截取之后的2个字符</span><br><span class="line">例：</span><br><span class="line">SELECT SUBSTRING(“成都融资事业部”,-5,2)</span><br><span class="line">结果：融资</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="sqlserver游标"><a href="#sqlserver游标" class="headerlink" title="sqlserver游标"></a>sqlserver游标</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">游标的基本五步 </span><br><span class="line"></span><br><span class="line">1.声明游标      declare  取个游标名  cursor</span><br><span class="line">for   SELECT * FROM  需要查询的表明</span><br><span class="line"></span><br><span class="line">2.打开游标      open   游标名字</span><br><span class="line"></span><br><span class="line">3.提取数据       fetch  from   游标名字</span><br><span class="line">这里可以加入循环   while @@fetch_status =0         循环打印和提取各行数据</span><br><span class="line"> 4.关闭游标       close  游标名字</span><br><span class="line"></span><br><span class="line">5.删除游标         deallocate   游标名字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可参考：</span><br><span class="line">https://blog.csdn.net/weixin_42556357/article/details/106261109?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166822112016800192279840%2522%252C%2522scm%2522%253A%252220140713.130212432.pc%255Fall.%2522%257D&amp;request_id=166822112016800192279840&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_ctr_v2-2-106261109-null-null.142^v63^opensearch_v2,201^v3^control_2,213^v2^t3_esquery_v3&amp;utm_term=sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86&amp;spm=1018.2226.3001.4187</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="怎么理解API"><a href="#怎么理解API" class="headerlink" title="怎么理解API"></a>怎么理解API</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可参考：</span><br><span class="line">https://blog.csdn.net/cumtdeyurenjie/article/details/80211896?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166822286916782391881811%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166822286916782391881811&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-80211896-null-null.142^v63^opensearch_v2,201^v3^control_2,213^v2^t3_esquery_v3&amp;utm_term=APi&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SqlServer</title>
      <link href="/2022/08/12/SqlServer%E8%B5%84%E6%96%99/"/>
      <url>/2022/08/12/SqlServer%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-SERVER介绍"><a href="#SQL-SERVER介绍" class="headerlink" title="SQL SERVER介绍"></a>SQL SERVER介绍</h1><p><strong>数据库：</strong>数据库是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p><p><strong>应用场景：</strong>在软件系统中无处不在，几乎所有的软件系统背后都有数据库，例如（淘宝，QQ，游戏等）。</p><p><strong>数据表展现形式：</strong> （二维表）</p><p><img src="/img%5C001.PNG" alt="001"></p><p><strong>主流关系型数据库：</strong> SQL SERVER，MySQL，Oracle等。</p><p><strong>数据库的安装：</strong></p><p>（1）百度搜索”I tell you”，或者访问 <a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><p>（2）选择合适的版本，下载安装。</p><p><img src="/img%5C002.PNG" alt="002"></p><p><strong>打开数据库：</strong></p><p>（1）启动服务：</p><p>​【1】命令行启动；【2】SQL SERVER配置管理器；【3】Windows服务；</p><p>（2）打开SQL SERVER Management Studio，使用工具连接到数据库。</p><p>​【1】Windows身份验证；【2】SQL SERVER身份验证；</p><p> <strong>数据库基本操作：</strong></p><p>（1）建库。</p><p>（2）建表。</p><p>（3）数据维护。</p><p><strong>数据库的迁移：</strong></p><p>（1）数据库的分离、附加；（分离和删除的区别在于硬盘上是否还留存有数据库文件）</p><p>（2）数据库的备份，还原；</p><p>（3）数据库脚本的保存；</p><h1 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h1><h2 id="一、检查数据库名是否存在"><a href="#一、检查数据库名是否存在" class="headerlink" title="一、检查数据库名是否存在"></a>一、检查数据库名是否存在</h2><p>如果需要创建数据库，可能会出现数据库名字重名的现象，我们可以使用如下代码查询数据库名是否存在，存在则删除此数据库。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--删除数据库</span><br><span class="line">if exists(select * from sys.databases where name = &#x27;DBTEST&#x27;)</span><br><span class="line">drop database DBTEST</span><br></pre></td></tr></table></figure><p>此代码检查数据库中是否存在”DBTEST”数据库，如果存在则删除此数据库，此处理方式最好只在学习阶段使用，在正式生产环境中慎用，操作不当可能会删除重要数据。</p><h2 id="二、创建数据库"><a href="#二、创建数据库" class="headerlink" title="二、创建数据库"></a>二、创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--创建数据库</span><br><span class="line">create database DBTEST</span><br><span class="line">on  --数据文件</span><br><span class="line">(</span><br><span class="line">name = &#x27;DBTEST&#x27;,   --逻辑名称</span><br><span class="line">filename = &#x27;D:\Data\DBTEST.mdf&#x27;,  --物理路径及名称</span><br><span class="line">size = 5MB,  --数据文件初始大小</span><br><span class="line">filegrowth = 2MB --数据文件增长速度,也可以使用百分比来设置</span><br><span class="line">)</span><br><span class="line">log on  --日志文件</span><br><span class="line">(</span><br><span class="line">name = &#x27;DBTEST_log&#x27;, --逻辑名称</span><br><span class="line">filename = &#x27;D:\Data\DBTEST_log.ldf&#x27;, --物理路径及名称</span><br><span class="line">size = 5MB, --日志文件初始大小</span><br><span class="line">filegrowth = 2MB --日志文件增长速度,也可以使用百分比来设置</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以上代码创建”DBTEST”数据库，并且分别使用on和log on规定了数据文件和日志文件的信息。</p><p>创建数据库也可以按照如下简单语法来创建：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database DBTEST</span><br></pre></td></tr></table></figure><p>如果按照上述方式创建数据库，数据库的数据文件和日志文件的相关信息，全部采取默认值。</p><h2 id="三、建表"><a href="#三、建表" class="headerlink" title="三、建表"></a>三、建表</h2><p><strong>使用数据库和删除数据表：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use DBTEST  --切换当前数据库为DBTEST</span><br><span class="line">--删除表(先判断表在当前数据库是否存在,存在则删除,其中type=&#x27;U&#x27;判断对象类型为用户定义表类型)</span><br><span class="line">if exists(select * from sys.objects where name = &#x27;Department&#x27; and type = &#x27;U&#x27;)</span><br><span class="line">drop table Department</span><br></pre></td></tr></table></figure><p><strong>创建数据表语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名</span><br><span class="line">(</span><br><span class="line">字段名1 数据类型(长度),</span><br><span class="line">字段名2 数据类型(长度)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中数据类型，我们在后面用到什么类型，在介绍什么类型，有的类型可以不填写长度。</p><p><strong>创建数据表示例（部门表，职级表，员工信息表）：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--创建部门表</span><br><span class="line">create table Department -</span><br><span class="line">(</span><br><span class="line">--创建部门编号;int代表整数类型;primary key代表主键;identity(1,1)代表从1开始步长为1自增长;</span><br><span class="line">DepartmentId int primary key identity(1,1),</span><br><span class="line">--创建部门名称;nvarchar(50)代表长度50的字符串;not null代表不能为空;</span><br><span class="line">DepartmentName nvarchar(50) not null,</span><br><span class="line">--创建部门描述；text代表长文本;</span><br><span class="line">DepartmentRemark text</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>字符串类型比较：</strong></p><p>char：定长，例如 char(10)，不论你存储的数据是否达到了10个字节，都要占去10个字节的空间 。</p><p>varchar：变长，例如varchar(10)，并不代表一定占用10个字节，而代表最多占用10个字节。最大长度8000，也可以使用varchar(max)表示2G以内的数据，但存储机制会和text一样，效率会降低。</p><p>text：长文本， 最大长度为2^31-1(2,147,483,647)个字符 。</p><p>nchar,nvarchar,ntext：名字前面多了一个n， 它表示存储的是Unicode数据类型的字符，区别varchar(100)可以存储100个英文字母或者50个汉字，而nvarchar(100)可以存储100个英文字母，也可以存储100个汉字。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--创建职级表，rank为系统关键字，此处使用[]代表自定义名字，而非系统关键字</span><br><span class="line">create table [Rank]</span><br><span class="line">(</span><br><span class="line">RankId int primary key identity(1,1),</span><br><span class="line">RankName nvarchar(50) not null,</span><br><span class="line">RankRemark text</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--创建员工信息表</span><br><span class="line">create table People</span><br><span class="line">(</span><br><span class="line">PeopleId int primary key identity(1,1),</span><br><span class="line">--references代表外键引用,此字段必须符合与其它表的外键约束</span><br><span class="line">DepartmentId int references Department(DepartmentId)  not null,</span><br><span class="line">RankId int references [Rank](RankId) not null,</span><br><span class="line">PeopleName nvarchar(50) not null,</span><br><span class="line">--default代表字段默认值; check可以规定字段值的约束条件;</span><br><span class="line">PeopleSex nvarchar(1) default(&#x27;男&#x27;) check(PeopleSex=&#x27;男&#x27; or PeopleSex=&#x27;女&#x27;) not null,</span><br><span class="line">PeopleBirth datetime not null,</span><br><span class="line">PeopleSalary decimal(12,2) check(PeopleSalary&gt;= 1000 and PeopleSalary &lt;= 100000) not null,</span><br><span class="line">--unique代表唯一约束，为数据提供唯一性保证;</span><br><span class="line">PeoplePhone nvarchar(20) unique not null,</span><br><span class="line">PeopleAddress nvarchar(100),</span><br><span class="line">--datetime和smalldatetime都可以表示时间类型，getdate()用于获取系统当前时间</span><br><span class="line">PeopleAddTime smalldatetime default(getdate())</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="四、修改表结构"><a href="#四、修改表结构" class="headerlink" title="四、修改表结构"></a>四、修改表结构</h1><p> （1）如需在表中添加列，请使用下面的语法: </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD column_name datatype</span><br></pre></td></tr></table></figure><p>例如该员工表添加一列员工邮箱：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table People</span><br><span class="line">add PeopleMail nvarchar(100)</span><br></pre></td></tr></table></figure><p>（2）如需在表中删除列，请使用下面的语法: </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">DROP COLUMN column_name</span><br></pre></td></tr></table></figure><p>例如删除员工表中的邮箱这一列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table People</span><br><span class="line">drop column PeopleMail</span><br></pre></td></tr></table></figure><p>（3）如需改变表中列的数据类型，请使用下列语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ALTER COLUMN column_name datatype</span><br></pre></td></tr></table></figure><p>例如需要改变邮箱列的数据类型为varchar(100)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table People</span><br><span class="line">alter column PeopleMail varchar(100)</span><br></pre></td></tr></table></figure><h2 id="五、删除添加约束"><a href="#五、删除添加约束" class="headerlink" title="五、删除添加约束"></a>五、删除添加约束</h2><p>删除约束语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if exists(select * from sysobjects where name=约束名)</span><br><span class="line">alter table 表名 drop constraint 约束名;</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>添加约束语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--添加主键约束</span><br><span class="line">alter table 表名 add constraint 约束名称 primary key(列名)</span><br><span class="line">--添加check约束</span><br><span class="line">alter table 表名 add constraint 约束名称 check(条件表达式)</span><br><span class="line">--添加unique约束</span><br><span class="line">alter table 表名 add constraint 约束名称 unique(列名)</span><br><span class="line">--添加default约束</span><br><span class="line">alter table 表名 add constraint 约束名称 default 默认值 for 列名</span><br><span class="line">--添加外键约束</span><br><span class="line">alter table 表名 add constraint 约束名称 foreign key (列名) references 关联表名(关联表列名)</span><br></pre></td></tr></table></figure><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><h2 id="一、向部门表插入数据"><a href="#一、向部门表插入数据" class="headerlink" title="一、向部门表插入数据"></a>一、向部门表插入数据</h2><p><strong>标准语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Department(DepartmentName,DepartmentRemark)</span><br><span class="line">values(&#x27;软件部&#x27;,&#x27;......&#x27;)</span><br><span class="line">insert into Department(DepartmentName,DepartmentRemark)</span><br><span class="line">values(&#x27;硬件部&#x27;,&#x27;......&#x27;)</span><br><span class="line">insert into Department(DepartmentName,DepartmentRemark)</span><br><span class="line">values(&#x27;市场部&#x27;,&#x27;......&#x27;)</span><br></pre></td></tr></table></figure><p><strong>简写语法：（省略字段名称）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Department values(&#x27;行政部&#x27;,&#x27;公司主管行政工作的部门&#x27;)</span><br></pre></td></tr></table></figure><p>此写法在给字段赋值的时候，必须保证顺序和数据表结构中字段顺序完全一致，不推荐使用此种写法，因为数据表结构变化的时候，数据会出错或产生错误数据。</p><p><strong>一次插入多行数据:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into Department(DepartmentName,DepartmentRemark)</span><br><span class="line">select &#x27;市场部&#x27;,&#x27;吹牛的部门&#x27; union</span><br><span class="line">select &#x27;产品部&#x27;,&#x27;天马星空的部门&#x27; union</span><br><span class="line">select &#x27;总经办&#x27;,&#x27;都是领导的部门&#x27; </span><br></pre></td></tr></table></figure><h2 id="二、向职级表插入数据"><a href="#二、向职级表插入数据" class="headerlink" title="二、向职级表插入数据"></a>二、向职级表插入数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into [Rank](RankName,RankRemark)</span><br><span class="line">values(&#x27;初级&#x27;,&#x27;辅助其他人完成任务&#x27;)</span><br><span class="line">insert into [Rank](RankName,RankRemark)</span><br><span class="line">values(&#x27;中级&#x27;,&#x27;具备独立处理事务的能力&#x27;)</span><br><span class="line">insert into [Rank](RankName,RankRemark)</span><br><span class="line">values(&#x27;高级&#x27;,&#x27;具备可以带动全场节奏的能力&#x27;)</span><br></pre></td></tr></table></figure><h2 id="三、向员工表插入数据"><a href="#三、向员工表插入数据" class="headerlink" title="三、向员工表插入数据"></a>三、向员工表插入数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(1,3,&#x27;刘备&#x27;,&#x27;男&#x27;,&#x27;1984-7-9&#x27;,20000,&#x27;13554785452&#x27;,&#x27;成都&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(1,2,&#x27;孙尚香&#x27;,&#x27;女&#x27;,&#x27;1987-7-9&#x27;,15000,&#x27;13256854578&#x27;,&#x27;荆州&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(1,1,&#x27;关羽&#x27;,&#x27;男&#x27;,&#x27;1988-8-8&#x27;,12000,&#x27;13985745871&#x27;,&#x27;荆州&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(2,1,&#x27;张飞&#x27;,&#x27;男&#x27;,&#x27;1990-8-8&#x27;,8000,&#x27;13535987412&#x27;,&#x27;宜昌&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(2,3,&#x27;赵云&#x27;,&#x27;男&#x27;,&#x27;1989-4-8&#x27;,9000,&#x27;13845789568&#x27;,&#x27;宜昌&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(3,3,&#x27;马超&#x27;,&#x27;男&#x27;,&#x27;1995-4-8&#x27;,9500,&#x27;13878562568&#x27;,&#x27;香港&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(3,2,&#x27;黄盖&#x27;,&#x27;男&#x27;,&#x27;1989-4-20&#x27;,8500,&#x27;13335457412&#x27;,&#x27;武汉&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(3,1,&#x27;貂蝉&#x27;,&#x27;女&#x27;,&#x27;1989-4-20&#x27;,6500,&#x27;13437100050&#x27;,&#x27;武汉&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(2,2,&#x27;曹操&#x27;,&#x27;男&#x27;,&#x27;1987-12-20&#x27;,25000,&#x27;13889562354&#x27;,&#x27;北京&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(2,3,&#x27;许褚&#x27;,&#x27;男&#x27;,&#x27;1981-11-11&#x27;,9000,&#x27;13385299632&#x27;,&#x27;北京&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(2,1,&#x27;典韦&#x27;,&#x27;男&#x27;,&#x27;1978-1-13&#x27;,8000,&#x27;13478545263&#x27;,&#x27;上海&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(1,1,&#x27;曹仁&#x27;,&#x27;男&#x27;,&#x27;1998-12-12&#x27;,7500,&#x27;13878523695&#x27;,&#x27;深圳&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(1,3,&#x27;孙坚&#x27;,&#x27;男&#x27;,&#x27;1968-11-22&#x27;,9000,&#x27;13698545841&#x27;,&#x27;广州&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(3,3,&#x27;孙策&#x27;,&#x27;男&#x27;,&#x27;1988-1-22&#x27;,11000,&#x27;13558745874&#x27;,&#x27;深圳&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(3,2,&#x27;孙权&#x27;,&#x27;男&#x27;,&#x27;1990-2-21&#x27;,12000,&#x27;13698745214&#x27;,&#x27;深圳&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(3,2,&#x27;大乔&#x27;,&#x27;女&#x27;,&#x27;1995-2-21&#x27;,13000,&#x27;13985478512&#x27;,&#x27;上海&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(2,1,&#x27;小乔&#x27;,&#x27;女&#x27;,&#x27;1996-2-21&#x27;,13500,&#x27;13778787874&#x27;,&#x27;北京&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(1,2,&#x27;周瑜&#x27;,&#x27;男&#x27;,&#x27;1992-10-11&#x27;,8000,&#x27;13987455214&#x27;,&#x27;武汉&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(2,3,&#x27;鲁肃&#x27;,&#x27;男&#x27;,&#x27;1984-9-10&#x27;,5500,&#x27;13254785965&#x27;,&#x27;成都&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(3,3,&#x27;吕蒙&#x27;,&#x27;男&#x27;,&#x27;1987-5-19&#x27;,8500,&#x27;13352197364&#x27;,&#x27;成都&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(1,1,&#x27;陆逊&#x27;,&#x27;男&#x27;,&#x27;1996-5-19&#x27;,7500,&#x27;13025457392&#x27;,&#x27;南京&#x27;,getdate())</span><br><span class="line"></span><br><span class="line">insert into People(DepartmentId,RankId,PeopleName,PeopleSex,PeopleBirth,</span><br><span class="line">PeopleSalary,PeoplePhone,PeopleAddress,PeopleAddTime)</span><br><span class="line">values(1,2,&#x27;太史慈&#x27;,&#x27;男&#x27;,&#x27;1983-6-1&#x27;,7500,&#x27;13077778888&#x27;,&#x27;上海&#x27;,getdate())</span><br></pre></td></tr></table></figure><p>其中DepartmentId，RankId，PeopleSalary均为数字类型，在赋值的时候不需要添加单引号，而其它类型需要添加单引号。</p><h2 id="四、查询数据是否插入成功"><a href="#四、查询数据是否插入成功" class="headerlink" title="四、查询数据是否插入成功"></a>四、查询数据是否插入成功</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from Department</span><br><span class="line">select * from [Rank]</span><br><span class="line">select * from People </span><br></pre></td></tr></table></figure><h1 id="修改和删除数据"><a href="#修改和删除数据" class="headerlink" title="修改和删除数据"></a>修改和删除数据</h1><h2 id="一、修改数据示例"><a href="#一、修改数据示例" class="headerlink" title="一、修改数据示例"></a>一、修改数据示例</h2><p>工资普调，为每个员工+500 元工资（批量修改）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update People set PeopleSalary = PeopleSalary + 500</span><br></pre></td></tr></table></figure><p>将员工编号为8的工资+1000 元（根据条件修改）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update People set PeopleSalary = PeopleSalary + 1000 WHERE PeopleId = 8</span><br></pre></td></tr></table></figure><p>将软件部（部门编号已知&#x3D;1）所有员工工资低于1万的全部调整成1 万（根据多条件修改）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update People set PEOPLESALARY = 10000 WHERE DepartmentId=1 and PEOPLESALARY &lt; 10000</span><br></pre></td></tr></table></figure><p>修改刘备工资为以前的2 倍，并且修改其地址为北京（同时修改多个字段）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE People SET PEOPLESALARY = PEOPLESALARY*2,PEOPLEADDRESS=&#x27;北京&#x27; WHERE PEOPLENAME = &#x27;刘备&#x27;</span><br></pre></td></tr></table></figure><h2 id="二、删除数据示例"><a href="#二、删除数据示例" class="headerlink" title="二、删除数据示例"></a>二、删除数据示例</h2><p>删除员工表中所有数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM People</span><br></pre></td></tr></table></figure><p>删除市场部(已知部门编号&#x3D;3)中工资大于15000 的所有员工</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM People WHERE DepartmentId = 3 and PEOPLESALARY &gt; 15000</span><br></pre></td></tr></table></figure><h2 id="三、drop、truncate、delete区别"><a href="#三、drop、truncate、delete区别" class="headerlink" title="三、drop、truncate、delete区别"></a>三、drop、truncate、delete区别</h2><p>drop table:删除表对象，表数据、表结构、表对象都进行了删除。</p><p>delete和truncate table：删除表数据，表对象及表结构依然存在。</p><p><strong>delete与truncate table的区别如下：</strong></p><p>delete：</p><p>（1）可以删除表所有数据，也可以根据条件删除数据。</p><p>（2）如果有自动编号，删除后继续编号，例如delete删除表所有数据后，之前数据的自动编号是1，2，3，那么之后新增数据的编号从4开始。</p><p>truncate table：</p><p>（1）只能清空整个表数据，不能根据条件删除数据。</p><p>（2）如果有自动编号，清空表数据后重新编号，例如truncate table清空表所有数据后，之前数据的自动编号是1，2，3，那么之后新增数据的编号仍然从1开始。</p><h1 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h1><p>（1）查询所有行所有列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--查询所有的部门</span><br><span class="line">SELECT * FROM Department</span><br><span class="line">--查询所有的职级</span><br><span class="line">SELECT * FROM [Rank]</span><br><span class="line">--查询所有的员工信息</span><br><span class="line">SELECT * FROM People</span><br></pre></td></tr></table></figure><p>（2）指定列查询（姓名，性别，月薪，电话）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT PeopleName,PeopleSex,PeopleSalary,PeoplePhone from People</span><br></pre></td></tr></table></figure><p>（3）指定列查询,并自定义中文列名（姓名，性别，月薪，电话）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT PeopleName 姓名,PeopleSex 性别,PeopleSalary 工资,PeoplePhone 电话 from People</span><br></pre></td></tr></table></figure><p>（4）查询公司员工所在城市（不需要重复数据）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct PeopleAddress from People</span><br></pre></td></tr></table></figure><p>（5）假设工资普调10%，查询原始工资和调整后的工资，显示（姓名，性别，月薪，加薪后的月薪）（添加列查询）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT PeopleName 姓名,PeopleSex 性别,PeopleSalary 月薪,PeopleSalary*1.1 加薪后月薪 from People</span><br></pre></td></tr></table></figure><h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><p><strong>SQL中常用运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=：等于，比较是否相等及赋值</span><br><span class="line">!=：比较不等于</span><br><span class="line">&gt;：比较大于</span><br><span class="line">&lt;：比较小于</span><br><span class="line">&gt;=：比较大于等于</span><br><span class="line">&lt;=：比较小于等于</span><br><span class="line">IS NULL：比较为空</span><br><span class="line">IS NOT NULL：比较不为空</span><br><span class="line">in：比较是否在其中</span><br><span class="line">like：模糊查询</span><br><span class="line">BETWEEN...AND...：比较是否在两者之间</span><br><span class="line">and：逻辑与（两个条件同时成立表达式成立）</span><br><span class="line">or：逻辑或（两个条件有一个成立表达式成立） </span><br><span class="line">not：逻辑非（条件成立，表达式则不成立；条件不成立，表达式则成立）</span><br></pre></td></tr></table></figure><p><strong>查询示例：</strong></p><p>（1）根据指定列（姓名，性别，月薪，电话）查询性别为女的员工信息,并自定义中文列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT PeopleName 姓名,PeopleSex 性别,PeopleSalary 工资,PeoplePhone 电话 from People</span><br><span class="line">WHERE PEOPLESEX = &#x27;女&#x27;</span><br></pre></td></tr></table></figure><p>（2）查询月薪大于等于10000 的员工信息( 单条件 )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeopleSalary &gt;= 10000 </span><br></pre></td></tr></table></figure><p>（3）查询月薪大于等于10000 的女员工信息(多条件)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeopleSalary &gt;= 10000 and PeopleSex = &#x27;女&#x27;</span><br></pre></td></tr></table></figure><p>（4）显示出出身年月在1980-1-1之后，而且月薪大于等于10000的女员工信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeopleBirth &gt;= &#x27;1980-1-1&#x27; and PeopleSalary &gt;= 10000 and PeopleSex = &#x27;女&#x27;</span><br></pre></td></tr></table></figure><p>（5）显示出月薪大于等于15000 的员工,或者月薪大于等于8000的女员工信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeopleSalary &gt;= 15000 or (PeopleSalary &gt;= 8000 and PeoPleSex = &#x27;女&#x27;)</span><br></pre></td></tr></table></figure><p>（6）查询月薪在10000-20000 之间员工信息( 多条件 )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from People where PeopleSalary &gt;= 10000 and PeopleSalary &lt;= 20000</span><br><span class="line">--方案二：</span><br><span class="line">select * from People where PeopleSalary  between 10000 and 20000</span><br></pre></td></tr></table></figure><p>（7）查询出地址在北京或者上海的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from People where PeopleAddress = &#x27;北京&#x27; or PeopleAddress = &#x27;上海&#x27;</span><br><span class="line">--方案二：</span><br><span class="line">select * from People where PeopleAddress in(&#x27;北京&#x27;,&#x27;上海&#x27;)</span><br></pre></td></tr></table></figure><p>（8）查询所有员工信息(根据工资排序，降序排列)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--order by: 排序  asc: 正序  desc: 倒序</span><br><span class="line">select * from People order by PeopleSalary desc</span><br></pre></td></tr></table></figure><p>（9）显示所有的员工信息，按照名字的长度进行倒序排列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People order by len(PeopleName) desc</span><br></pre></td></tr></table></figure><p>（10）查询工资最高的5个人的信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select top 5 * from People order by PeopleSalary desc</span><br></pre></td></tr></table></figure><p>（11）查询工资最高的10%的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select top 10 percent * from People order by PeopleSalary desc</span><br></pre></td></tr></table></figure><p>（12）查询出地址没有填写的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeopleAddress is null</span><br></pre></td></tr></table></figure><p>（13）查询出地址已经填写的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeopleAddress is not null</span><br></pre></td></tr></table></figure><p>（14）查询所有的80后员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from People where PeopleBirth &gt;= &#x27;1980-1-1&#x27; and PeopleBirth &lt;= &#x27;1989-12-31&#x27;</span><br><span class="line">--方案二：</span><br><span class="line">select * from People where PeopleBirth between &#x27;1980-1-1&#x27; and &#x27;1989-12-31&#x27;</span><br><span class="line">--方案三：</span><br><span class="line">select * from People where year(PeopleBirth) &gt;= 1980 and year(PeopleBirth) &lt;= 1989</span><br></pre></td></tr></table></figure><p>（15）查询年龄在30-40 之间，并且工资在15000-30000 之间的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from People where</span><br><span class="line">(year(getdate())-year(PeopleBirth) &gt;= 30 and year(getdate())-year(PeopleBirth) &lt;= 40) and</span><br><span class="line">(PeopleSalary &gt;= 15000 and PeopleSalary &lt;= 30000)</span><br><span class="line">--方案二：</span><br><span class="line">select * from People where</span><br><span class="line">(year(getdate())-year(PeopleBirth) between 30 and 40)</span><br><span class="line">and PeopleSalary between 15000 and 30000</span><br></pre></td></tr></table></figure><p>（16）查询出巨蟹 6.22–7.22 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where </span><br><span class="line">(month(PeopleBirth) = 6 and DAY(PeopleBirth) &gt;= 22) or</span><br><span class="line">(month(PeopleBirth) = 7 and DAY(PeopleBirth) &lt;= 22)</span><br></pre></td></tr></table></figure><p>（17）查询工资比赵云高的人</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeopleSalary &gt; </span><br><span class="line">(select PeopleSalary from People where PEOPLENAME = &#x27;赵云&#x27;)</span><br></pre></td></tr></table></figure><p>（18）查询出和赵云在同一个城市的人</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PEOPLEADDRESS = </span><br><span class="line">(select PEOPLEADDRESS from People where PEOPLENAME = &#x27;赵云&#x27;)</span><br></pre></td></tr></table></figure><p>（19）查询出生肖为鼠的人员信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where year(PeopleBirth) % 12 = 4</span><br></pre></td></tr></table></figure><p>（20）查询所有员工信息，添加一列显示属相(鼠,牛,虎,兔,龙,蛇,马,羊,猴,鸡,狗,猪)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select PeopleName 姓名,PeopleSex 性别,PeopleSalary 工资,PeoplePhone 电话,PEOPLEBIRTH 生日,</span><br><span class="line">case</span><br><span class="line">when year(PeopleBirth) % 12 = 4 then &#x27;鼠&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 5 then &#x27;牛&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 6 then &#x27;虎&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 7 then &#x27;兔&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 8 then &#x27;龙&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 9 then &#x27;蛇&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 10 then &#x27;马&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 11 then &#x27;羊&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 0 then &#x27;猴&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 1 then &#x27;鸡&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 2 then &#x27;狗&#x27;</span><br><span class="line">when year(PeopleBirth) % 12 = 3 then &#x27;猪&#x27;</span><br><span class="line">ELSE &#x27;&#x27;</span><br><span class="line">end 生肖</span><br><span class="line">from People</span><br><span class="line"></span><br><span class="line">--方案二：</span><br><span class="line">select PeopleName 姓名,PeopleSex 性别,PeopleSalary 工资,PeoplePhone 电话,PEOPLEBIRTH 生日,</span><br><span class="line">case year(PeopleBirth) % 12</span><br><span class="line">when 4 then &#x27;鼠&#x27;</span><br><span class="line">when 5 then &#x27;牛&#x27;</span><br><span class="line">when 6 then &#x27;虎&#x27;</span><br><span class="line">when 7 then &#x27;兔&#x27;</span><br><span class="line">when 8 then &#x27;龙&#x27;</span><br><span class="line">when 9 then &#x27;蛇&#x27;</span><br><span class="line">when 10 then &#x27;马&#x27;</span><br><span class="line">when 11 then &#x27;羊&#x27;</span><br><span class="line">when 0 then &#x27;猴&#x27;</span><br><span class="line">when 1 then &#x27;鸡&#x27;</span><br><span class="line">when 2 then &#x27;狗&#x27;</span><br><span class="line">when 3 then &#x27;猪&#x27;</span><br><span class="line">ELSE &#x27;&#x27;</span><br><span class="line">end 生肖</span><br><span class="line">from People</span><br></pre></td></tr></table></figure><h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>模糊查询使用like关键字和通配符结合来实现，通配符具体含义如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%：代表匹配0个字符、1个字符或多个字符。</span><br><span class="line">_：代表匹配有且只有1个字符。</span><br><span class="line">[]：代表匹配范围内</span><br><span class="line">[^]：代表匹配不在范围内</span><br></pre></td></tr></table></figure><p>（1）查询姓刘的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People  where PeopleName like &#x27;刘%&#x27;</span><br></pre></td></tr></table></figure><p>（2）查询名字中含有 “ 尚 “ 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People  where PeopleName like &#x27;%尚%&#x27;</span><br></pre></td></tr></table></figure><p>（3）显示名字中含有“尚”或者“史”的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People  where PeopleName like &#x27;%尚%&#x27; or PeopleName like &#x27;%史%&#x27;</span><br></pre></td></tr></table></figure><p>（4）查询姓刘的员工，名字是2个字</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from People  where PeopleName like &#x27;刘_&#x27;</span><br><span class="line">--方案二：</span><br><span class="line">select * from People where SUBSTRING(PeopleName,1,1) = &#x27;刘&#x27; and LEN(PeopleName) = 2</span><br></pre></td></tr></table></figure><p>（5）查询出名字最后一个字是香，名字一共三个字的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from People  where PeopleName like &#x27;__香&#x27;</span><br><span class="line">--方案二：</span><br><span class="line">select * from People where SUBSTRING(PeopleName,3,1) = &#x27;香&#x27; and LEN(PeopleName) = 3</span><br></pre></td></tr></table></figure><p>（6）查询出电话号码开头138的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People  where PeoplePhone like &#x27;138%&#x27;</span><br></pre></td></tr></table></figure><p>（7）查询出电话号码开头138的员工信息,第4位可能是7，可能8 ，最后一个号码是5</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeoplePhone like &#x27;138[7,8]%5&#x27;</span><br></pre></td></tr></table></figure><p>（8）查询出电话号码开头133的员工信息,第4位是2-5之间的数字 ，最后一个号码不是2和3</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from People where PeoplePhone like &#x27;133[2,3,4,5]%[^2,3]&#x27;</span><br><span class="line">--方案二：</span><br><span class="line">select * from People where PeoplePhone like &#x27;133[2-5]%[^2-3]&#x27;</span><br></pre></td></tr></table></figure><h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><p>SQL SERVER中聚合函数主要有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count:求数量</span><br><span class="line">max:求最大值</span><br><span class="line">min:求最小值</span><br><span class="line">sum:求和</span><br><span class="line">avg:求平均值</span><br></pre></td></tr></table></figure><h2 id="一、聚合函数举例应用"><a href="#一、聚合函数举例应用" class="headerlink" title="一、聚合函数举例应用"></a>一、聚合函数举例应用</h2><p>（1）求员工总人数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select COUNT(*) 数量 from People</span><br></pre></td></tr></table></figure><p>（2）求最大值，求最高工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select MAX(PeopleSalary) 最高工资 from People</span><br></pre></td></tr></table></figure><p>（3）求最小时，求最小工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select MIN(PeopleSalary) 最低工资 from People</span><br></pre></td></tr></table></figure><p>（4）求和，求所有员工的工资总和</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select SUM(PeopleSalary) 工资总和 from People</span><br></pre></td></tr></table></figure><p>（5）求平均值，求所有员工的平均工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select AVG(PeopleSalary) 平均工资 from People</span><br><span class="line">--方案二：精确到2位小数</span><br><span class="line">select ROUND(AVG(PeopleSalary),2)  平均工资 from People</span><br><span class="line">--方案三：精确到2位小数</span><br><span class="line">select Convert(decimal(12,2),AVG(PeopleSalary))  平均工资 from People</span><br></pre></td></tr></table></figure><p>ROUND函数用法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">round(num,len,[type])</span><br><span class="line">其中:</span><br><span class="line">num表示需要处理的数字，len表示需要保留的长度，type处理类型(0是默认值代表四舍五入，非0代表直接截取)</span><br><span class="line">select ROUND(123.45454,3)  --123.45500</span><br><span class="line">select ROUND(123.45454,3,1) --123.45400</span><br></pre></td></tr></table></figure><p>（6）求数量，最大值，最小值，总和，平均值，在一行显示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select COUNT(*) 数量,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资,SUM(PeopleSalary) 工资总和,AVG(PeopleSalary) 平均工资 from People</span><br></pre></td></tr></table></figure><p>（7）查询出武汉地区的员工人数，总工资，最高工资，最低工资和平均工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;武汉&#x27; 地区,COUNT(*) 数量,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资</span><br><span class="line">,SUM(PeopleSalary) 工资总和,AVG(PeopleSalary) 平均工资 from People </span><br><span class="line">WHERE PEOPLEADDRESS = &#x27;武汉&#x27;</span><br></pre></td></tr></table></figure><p>（8）求出工资比平均工资高的人员信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People where PeopleSalary &gt; (select AVG(PeopleSalary) 平均工资 from People)</span><br></pre></td></tr></table></figure><p>（9）求数量，年龄最大值，年龄最小值，年龄总和，年龄平均值，在一行显示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select COUNT(*) 数量,</span><br><span class="line">MAX(year(getdate())-year(PeopleBirth)) 最高年龄,</span><br><span class="line">MIN(year(getdate())-year(PeopleBirth)) 最低年龄,</span><br><span class="line">SUM(year(getdate())-year(PeopleBirth)) 年龄总和,</span><br><span class="line">AVG(year(getdate())-year(PeopleBirth)) 平均年龄 </span><br><span class="line">from People</span><br><span class="line">--方案二：</span><br><span class="line">select COUNT(*) 数量,</span><br><span class="line">MAX(DATEDIFF(year, PeopleBirth, getDate())) 最高年龄,</span><br><span class="line">MIN(DATEDIFF(year, PeopleBirth, getDate())) 最低年龄,</span><br><span class="line">SUM(DATEDIFF(year, PeopleBirth, getDate())) 年龄总和,</span><br><span class="line">AVG(DATEDIFF(year, PeopleBirth, getDate())) 平均年龄 </span><br><span class="line">from People</span><br></pre></td></tr></table></figure><p>（10）计算出月薪在10000 以上的男性员工的最大年龄，最小年龄和平均年龄</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select &#x27;男&#x27; 性别,COUNT(*) 数量,</span><br><span class="line">MAX(year(getdate())-year(PeopleBirth)) 最高年龄,</span><br><span class="line">MIN(year(getdate())-year(PeopleBirth)) 最低年龄,</span><br><span class="line">SUM(year(getdate())-year(PeopleBirth)) 年龄总和,</span><br><span class="line">AVG(year(getdate())-year(PeopleBirth)) 平均年龄 </span><br><span class="line">from People where PeopleSex = &#x27;男&#x27; and PeopleSalary &gt;= 10000</span><br><span class="line">--方案二：</span><br><span class="line">select &#x27;男&#x27; 性别,COUNT(*) 数量,</span><br><span class="line">MAX(DATEDIFF(year, PeopleBirth, getDate())) 最高年龄,</span><br><span class="line">MIN(DATEDIFF(year, PeopleBirth, getDate())) 最低年龄,</span><br><span class="line">SUM(DATEDIFF(year, PeopleBirth, getDate())) 年龄总和,</span><br><span class="line">AVG(DATEDIFF(year, PeopleBirth, getDate())) 平均年龄 </span><br><span class="line">from People where PeopleSex = &#x27;男&#x27; and PeopleSalary &gt;= 10000</span><br></pre></td></tr></table></figure><p>（11）统计出所在地在“武汉或上海”的所有女员工数量以及最大年龄，最小年龄和平均年龄</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select &#x27;武汉或上海&#x27; 地区,&#x27;女&#x27; 性别,COUNT(*) 数量,</span><br><span class="line">MAX(year(getdate())-year(PeopleBirth)) 最高年龄,</span><br><span class="line">MIN(year(getdate())-year(PeopleBirth)) 最低年龄,</span><br><span class="line">SUM(year(getdate())-year(PeopleBirth)) 年龄总和,</span><br><span class="line">AVG(year(getdate())-year(PeopleBirth)) 平均年龄  </span><br><span class="line">from People where PeopleSex = &#x27;女&#x27; and PeopleAddress in(&#x27;武汉&#x27;,&#x27;上海&#x27;)</span><br><span class="line">--方案二：</span><br><span class="line">select &#x27;武汉或上海&#x27; 地区,&#x27;女&#x27; 性别,COUNT(*) 数量,</span><br><span class="line">MAX(DATEDIFF(year, PeopleBirth, getDate())) 最高年龄,</span><br><span class="line">MIN(DATEDIFF(year, PeopleBirth, getDate())) 最低年龄,</span><br><span class="line">SUM(DATEDIFF(year, PeopleBirth, getDate())) 年龄总和,</span><br><span class="line">AVG(DATEDIFF(year, PeopleBirth, getDate())) 平均年龄  </span><br><span class="line">from People where PeopleSex = &#x27;女&#x27; and PeopleAddress in(&#x27;武汉&#x27;,&#x27;上海&#x27;)</span><br></pre></td></tr></table></figure><p>（12）求出年龄比平均年龄高的人员信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from People where </span><br><span class="line">year(getdate())-year(PeopleBirth) &gt; </span><br><span class="line">(select AVG(year(getdate())-year(PeopleBirth)) </span><br><span class="line">from People)</span><br><span class="line">--方案二：</span><br><span class="line">select * from People where </span><br><span class="line">DATEDIFF(year, PeopleBirth, getDate()) &gt; </span><br><span class="line">(select AVG(DATEDIFF(year, PeopleBirth, getDate())) </span><br><span class="line">from People)</span><br></pre></td></tr></table></figure><h2 id="二、补充-SQL中常用时间处理函数"><a href="#二、补充-SQL中常用时间处理函数" class="headerlink" title="二、补充-SQL中常用时间处理函数"></a>二、补充-SQL中常用时间处理函数</h2><p>GETDATE() 返回当前的日期和时间</p><p>DATEPART() 返回日期&#x2F;时间的单独部分</p><p>DATEADD()  返回日期中添加或减去指定的时间间隔</p><p>DATEDIFF() 返回两个日期直接的时间</p><p>DATENAME() 返回指定日期的指定日期部分的整数</p><p>CONVERT()  返回不同格式的时间</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select DATEDIFF(day, &#x27;2019-08-20&#x27;, getDate());    --获取指定时间单位的差值</span><br><span class="line">SELECT DATEADD(MINUTE,-5,GETDATE())               --加减时间,此处为获取五分钟前的时间,MINUTE 表示分钟，可为 YEAR,MONTH,DAY,HOUR</span><br><span class="line">select DATENAME(month, getDate());                --当前月份</span><br><span class="line">select DATENAME(WEEKDAY, getDate());              --当前星期几</span><br><span class="line">select DATEPART(month, getDate());                --当前月份</span><br><span class="line">select DAY(getDate());                            --返回当前日期天数</span><br><span class="line">select MONTH(getDate());                          --返回当前日期月数</span><br><span class="line">select YEAR(getDate());                           --返回当前日期年数</span><br><span class="line"></span><br><span class="line">SELECT CONVERT(VARCHAR(22),GETDATE(),20)          --2020-01-09 14:46:46</span><br><span class="line">SELECT CONVERT(VARCHAR(24),GETDATE(),21)          --2020-01-09 14:46:55.91</span><br><span class="line">SELECT CONVERT(VARCHAR(22),GETDATE(),23)  --2020-01-09</span><br><span class="line">SELECT CONVERT(VARCHAR(22),GETDATE(),24)          --15:04:07</span><br><span class="line">Select CONVERT(varchar(20),GETDATE(),14)          --15:05:49:330</span><br></pre></td></tr></table></figure><p><strong>时间格式控制字符串：</strong></p><table><thead><tr><th>名称</th><th>日期单位</th><th>缩写</th></tr></thead><tbody><tr><td>年</td><td>year</td><td>yyyy 或yy</td></tr><tr><td>季度</td><td>quarter</td><td>qq,q</td></tr><tr><td>月</td><td>month</td><td>mm,m</td></tr><tr><td>一年中第几天</td><td>dayofyear</td><td>dy,y</td></tr><tr><td>日</td><td>day</td><td>dd,d</td></tr><tr><td>一年中第几周</td><td>week</td><td>wk,ww</td></tr><tr><td>星期</td><td>weekday</td><td>dw</td></tr><tr><td>小时</td><td>Hour</td><td>hh</td></tr><tr><td>分钟</td><td>minute</td><td>mi,n</td></tr><tr><td>秒</td><td>second</td><td>ss,s</td></tr><tr><td>毫秒</td><td>millisecond</td><td>ms</td></tr></tbody></table><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><p>（1）根据员工所在地区分组统计员工人数 ,员工工资总和 ,平均工资，最高工资和最低工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：使用union(此方案需要知道所有的地区，分别查询出所有地区的数据，然后使用union拼接起来。)</span><br><span class="line">select &#x27;武汉&#x27; 地区,COUNT(*) 数量,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资</span><br><span class="line">,SUM(PeopleSalary) 工资总和,AVG(PeopleSalary) 平均工资 from People</span><br><span class="line"> where PeopleAddress = &#x27;武汉&#x27; union</span><br><span class="line">select &#x27;北京&#x27; 地区,COUNT(*) 数量,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资</span><br><span class="line">,SUM(PeopleSalary) 工资总和,AVG(PeopleSalary) 平均工资 from People</span><br><span class="line"> where PeopleAddress = &#x27;北京&#x27;</span><br><span class="line"> --...其它地区数据</span><br><span class="line"> --...其他地区数据</span><br><span class="line"> </span><br><span class="line"> --方案二：使用Group by</span><br><span class="line">select PeopleAddress 地区,COUNT(*) 人数,SUM(PeopleSalary) 工资总和,</span><br><span class="line">AVG(PeopleSalary) 平均工资,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资 </span><br><span class="line">from People group by PeopleAddress</span><br></pre></td></tr></table></figure><p>（2）根据员工所在地区分组统计员工人数，员工工资总和，平均工资，最高工资和最低工资，1985 年及以后出身的员工不参与统计。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select PeopleAddress 地区,COUNT(*) 人数,SUM(PeopleSalary) 工资总和,</span><br><span class="line">AVG(PeopleSalary) 平均工资,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资 </span><br><span class="line">from People</span><br><span class="line">where PeopleBirth &lt; &#x27;1985-1-1&#x27;</span><br><span class="line">group by PeopleAddress</span><br></pre></td></tr></table></figure><p>（3）根据员工所在地区分组统计员工人数，员工工资总和，平均工资，最高工资和最低工资，要求筛选出员工人数至少在2人及以上的记录，并且1985年及以后出身的员工不参与统计。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select PeopleAddress 地区,COUNT(*) 人数,SUM(PeopleSalary) 工资总和,</span><br><span class="line">AVG(PeopleSalary) 平均工资,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资 </span><br><span class="line">from People </span><br><span class="line">where PeopleBirth &lt; &#x27;1985-1-1&#x27;</span><br><span class="line">group by PeopleAddress</span><br><span class="line">having COUNT(*) &gt;= 2</span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="一、笛卡尔乘积"><a href="#一、笛卡尔乘积" class="headerlink" title="一、笛卡尔乘积"></a>一、笛卡尔乘积</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People,Department</span><br></pre></td></tr></table></figure><p>此查询结果会将People表的所有数据和Department表的所有数据进行依次排列组合形成新的记录。例如People表有10条记录，Department表有3条记录，则排列组合之后查询结果会有10*3&#x3D;30条记录。</p><h2 id="二、简单多表查询"><a href="#二、简单多表查询" class="headerlink" title="二、简单多表查询"></a>二、简单多表查询</h2><p>此种查询不符合主外建关系的数据不会被显示</p><p><strong>查询员工信息，同时显示部门名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People,Department where People.DepartmentId = Department.DepartmentId </span><br></pre></td></tr></table></figure><p><strong>查询员工信息，同时显示职级名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People,Rank where People.RankId = Rank.RankId</span><br></pre></td></tr></table></figure><p><strong>查询员工信息，同时显示部门名称，职位名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People,Department,Rank</span><br><span class="line">where People.DepartmentId = Department.DepartmentId and People.RankId = Rank.RankId</span><br></pre></td></tr></table></figure><h2 id="三、内连接"><a href="#三、内连接" class="headerlink" title="三、内连接"></a>三、内连接</h2><p>此种查询不符合主外建关系的数据不会被显示</p><p><strong>查询员工信息，同时显示部门名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People inner join Department on People.DepartmentId = Department.DepartmentId </span><br></pre></td></tr></table></figure><p><strong>查询员工信息，同时显示职级名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People inner join Rank on People.RankId = Rank.RankId</span><br></pre></td></tr></table></figure><p><strong>查询员工信息，同时显示部门名称，职位名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People </span><br><span class="line">inner join Department on People.DepartmentId = Department.DepartmentId </span><br><span class="line">inner join Rank on People.RankId = Rank.RankId</span><br></pre></td></tr></table></figure><h2 id="三、外连接"><a href="#三、外连接" class="headerlink" title="三、外连接"></a>三、外连接</h2><p>外连接分为左外连接、右外连接和全外连接。</p><p>左外联接：以左表为主表显示全部数据，主外键关系找不到数据的地方null取代。</p><p><strong>以下是左外连接的语法示例：</strong></p><p><strong>查询员工信息，同时显示部门名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People left join Department on People.DepartmentId = Department.DepartmentId </span><br></pre></td></tr></table></figure><p><strong>查询员工信息，同时显示职级名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People left join Rank on People.RankId = Rank.RankId</span><br></pre></td></tr></table></figure><p><strong>查询员工信息，同时显示部门名称，职位名称</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from People </span><br><span class="line">left join Department on People.DepartmentId = Department.DepartmentId </span><br><span class="line">left join Rank on People.RankId = Rank.RankId</span><br></pre></td></tr></table></figure><p>右外连接（right join）：右外连接和左外连接类似，A left join B  &#x3D;&#x3D;  B right join A</p><p>全外连接（full join）：两张表的所有数据无论是否符合主外键关系必须全部显示，不符合主外键关系的地方null取代。</p><h2 id="四、多表查询综合示例"><a href="#四、多表查询综合示例" class="headerlink" title="四、多表查询综合示例"></a>四、多表查询综合示例</h2><p>（1）查询出武汉地区所有的员工信息，要求显示部门名称以及员工的详细资料</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select PeopleName 姓名,People.DepartmentId 部门编号 ,DepartmentName 部门名称,</span><br><span class="line">PeopleSex 性别,PeopleBirth 生日,</span><br><span class="line">PeopleSalary 月薪,PeoplePhone 电话,PeopleAddress 地区</span><br><span class="line">from People left join DEPARTMENT on Department.DepartmentId = People.DepartmentId</span><br><span class="line">where PeopleAddress = &#x27;武汉&#x27;</span><br></pre></td></tr></table></figure><p>（2）查询出武汉地区所有的员工信息，要求显示部门名称，职级名称以及员工的详细资料</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select PeopleName 姓名,DepartmentName 部门名称,RankName 职位名称,</span><br><span class="line">PeopleSex 性别,PeopleBirth 生日,</span><br><span class="line">PeopleSalary 月薪,PeoplePhone 电话,PeopleAddress 地区</span><br><span class="line">from People left join DEPARTMENT on Department.DepartmentId = People.DepartmentId</span><br><span class="line">left join [Rank] on [Rank].RankId = People.RankId</span><br><span class="line">where PeopleAddress = &#x27;武汉&#x27;</span><br></pre></td></tr></table></figure><p>（3）根据部门分组统计员工人数，员工工资总和，平均工资，最高工资和最低工资。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--提示：在进行分组统计查询的时候添加二表联合查询。</span><br><span class="line">select DepartmentName 部门名称,COUNT(*) 人数,SUM(PeopleSalary) 工资总和,</span><br><span class="line">AVG(PeopleSalary) 平均工资,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资 </span><br><span class="line">from People left join DEPARTMENT on Department.DepartmentId = People.DepartmentId</span><br><span class="line">group by Department.DepartmentId,DepartmentName</span><br></pre></td></tr></table></figure><p>（4）根据部门分组统计员工人数，员工工资总和，平均工资，最高工资和最低工资，平均工资在10000 以下的不参与统计，并且根据平均工资降序排列。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select DepartmentName 部门名称,COUNT(*) 人数,SUM(PeopleSalary) 工资总和,</span><br><span class="line">AVG(PeopleSalary) 平均工资,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资 </span><br><span class="line">from People left join DEPARTMENT on Department.DepartmentId = People.DepartmentId</span><br><span class="line">group by Department.DepartmentId,DepartmentName</span><br><span class="line">having AVG(PeopleSalary) &gt;= 10000</span><br><span class="line">order by AVG(PeopleSalary) desc</span><br></pre></td></tr></table></figure><p>（5）根据部门名称，然后根据职位名称，分组统计员工人数，员工工资总和，平均工资，最高工资和最低工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select DepartmentName 部门名称,RANKNAME 职级名称,COUNT(*) 人数,SUM(PeopleSalary) 工资总和,</span><br><span class="line">AVG(PeopleSalary) 平均工资,MAX(PeopleSalary) 最高工资,MIN(PeopleSalary) 最低工资 </span><br><span class="line">from People </span><br><span class="line">LEFT JOIN DEPARTMENT on Department.DepartmentId = People.DepartmentId</span><br><span class="line">LEFT JOIN [Rank] on [Rank].RANKID = People.RANKID</span><br><span class="line">group by Department.DepartmentId,DepartmentName,[Rank].RANKID,RANKNAME</span><br></pre></td></tr></table></figure><h2 id="五、自连接"><a href="#五、自连接" class="headerlink" title="五、自连接"></a>五、自连接</h2><p>自连接：自己连接自己。</p><p>例如有如下结构和数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Dept</span><br><span class="line">(</span><br><span class="line">DeptId int primary key,  --部门编号</span><br><span class="line">DeptName varchar(50) not null, --部门名称</span><br><span class="line">ParentId int not null,  --上级部门编号</span><br><span class="line">)</span><br><span class="line">insert into Dept(DeptId,DeptName,ParentId)</span><br><span class="line">values(1,&#x27;软件部&#x27;,0)</span><br><span class="line">insert into Dept(DeptId,DeptName,ParentId)</span><br><span class="line">values(2,&#x27;硬件部&#x27;,0)</span><br><span class="line"></span><br><span class="line">insert into Dept(DeptId,DeptName,ParentId)</span><br><span class="line">values(3,&#x27;软件研发部&#x27;,1)</span><br><span class="line">insert into Dept(DeptId,DeptName,ParentId)</span><br><span class="line">values(4,&#x27;软件测试部&#x27;,1)</span><br><span class="line">insert into Dept(DeptId,DeptName,ParentId)</span><br><span class="line">values(5,&#x27;软件实施部&#x27;,1)</span><br><span class="line"></span><br><span class="line">insert into Dept(DeptId,DeptName,ParentId)</span><br><span class="line">values(6,&#x27;硬件研发部&#x27;,2)</span><br><span class="line">insert into Dept(DeptId,DeptName,ParentId)</span><br><span class="line">values(7,&#x27;硬件测试部&#x27;,2)</span><br><span class="line">insert into Dept(DeptId,DeptName,ParentId)</span><br><span class="line">values(8,&#x27;硬件实施部&#x27;,2)</span><br></pre></td></tr></table></figure><p>如果要查询出所有部门信息，并且查询出自己的上级部门，查询结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--部门编号      部门名称     上级部门</span><br><span class="line">-- 3           软件研发部     软件部</span><br><span class="line">-- 4           软件测试部     软件部</span><br><span class="line">-- 5           软件实施部     软件部</span><br><span class="line">-- 6           硬件研发部     硬件部</span><br><span class="line">-- 7           硬件测试部     硬件部</span><br><span class="line">-- 8           硬件实施部     硬件部</span><br><span class="line"></span><br><span class="line">select A.DeptId 部门编号,A.DeptName 部门名称,B.DeptName 上级名称 from Dept A </span><br><span class="line">inner join Dept B on A.ParentId = B.DeptId</span><br></pre></td></tr></table></figure><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="一、数据库结构设计三范式"><a href="#一、数据库结构设计三范式" class="headerlink" title="一、数据库结构设计三范式"></a>一、数据库结构设计三范式</h2><p><strong>第一范式：</strong>是对属性的原子性，要求属性具有原子性，不可再分解。</p><p>如有如下表结构设计：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Student --学生表</span><br><span class="line">(</span><br><span class="line">StuId varchar(20) primary key,--学号</span><br><span class="line">StuName varchar(20) not null,--学生姓名</span><br><span class="line">StuContact varchar(50) not null, --联系方式</span><br><span class="line">)</span><br><span class="line">insert into Student(StuId,StuName,StuContact) </span><br><span class="line">values(&#x27;001&#x27;,&#x27;刘备&#x27;,&#x27;QQ:185699887;Tel:13885874587&#x27;)</span><br><span class="line">select * from Student</span><br></pre></td></tr></table></figure><p>上述设计则不满足第一范式，联系方式这一列并不是不可再分的最小单元,应修改为如下结构</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Student --学生表</span><br><span class="line">(</span><br><span class="line">StuId varchar(20) primary key,--学号</span><br><span class="line">StuName varchar(20) not null,--学生姓名</span><br><span class="line">  Tel varchar(20) not null, --联系电话</span><br><span class="line">  QQ varchar(20) not null,  --联系QQ</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>第二范式：</strong>是对记录的惟一性，要求记录有惟一标识，即实体的惟一性，即不存在部分依赖；</p><p>如有如下表结构设计：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--选课成绩表</span><br><span class="line">create table StudentCourse</span><br><span class="line">(</span><br><span class="line">StuId varchar(20),--学号</span><br><span class="line">StuName varchar(20) not null,--学生姓名</span><br><span class="line">CourseId varchar(20) not null,--课程编号</span><br><span class="line">CourseName varchar(20) not null, --选课课程名称</span><br><span class="line">CourseScore int not null, --考试成绩</span><br><span class="line">)</span><br><span class="line">insert into StudentCourse(StuId,StuName,CourseId,CourseName,CourseScore)</span><br><span class="line">values(&#x27;001&#x27;,&#x27;刘备&#x27;,&#x27;001&#x27;,&#x27;语文&#x27;,80)</span><br><span class="line">insert into StudentCourse(StuId,StuName,CourseId,CourseName,CourseScore)</span><br><span class="line">values(&#x27;001&#x27;,&#x27;刘备&#x27;,&#x27;002&#x27;,&#x27;数学&#x27;,70)</span><br><span class="line">insert into StudentCourse(StuId,StuName,CourseId,CourseName,CourseScore)</span><br><span class="line">values(&#x27;002&#x27;,&#x27;关羽&#x27;,&#x27;003&#x27;,&#x27;英语&#x27;,80)</span><br><span class="line">insert into StudentCourse(StuId,StuName,CourseId,CourseName,CourseScore)</span><br><span class="line">values(&#x27;003&#x27;,&#x27;张飞&#x27;,&#x27;003&#x27;,&#x27;英语&#x27;,90)</span><br></pre></td></tr></table></figure><p>上述设计中有两个事物，一个学生信息，一个课程信息，很显然这两个事物都没有保证实体的唯一性，这里的姓名依赖学号，课程名称依赖课程编号，所以不符合二范式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Course --课程</span><br><span class="line">(</span><br><span class="line">CourseId int primary key identity(1,1),--课程编号</span><br><span class="line">CourseName varchar(30) not null, --课程名称</span><br><span class="line">CourseContent text --课程介绍</span><br><span class="line">)</span><br><span class="line">insert into Course(CourseName,CourseContent) values(&#x27;HTML&#x27;,&#x27;静态网页的制作&#x27;)</span><br><span class="line">insert into Course(CourseName,CourseContent) values(&#x27;WinForm&#x27;,&#x27;Windows应用程序开发&#x27;)</span><br><span class="line"></span><br><span class="line">create table Student --学生</span><br><span class="line">(</span><br><span class="line">StuId int primary key identity(1,1), --学生编号</span><br><span class="line">StuName varchar(50) not null, --学生名字</span><br><span class="line">StuSex char(2) not null --学生性别</span><br><span class="line">)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;刘备&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;关羽&#x27;,&#x27;男&#x27;)</span><br><span class="line"></span><br><span class="line">create Table Exam --考试信息表</span><br><span class="line">(</span><br><span class="line">ExamId int primary key identity(1,1), --选课成绩编号</span><br><span class="line">StuId int not null, --学生编号</span><br><span class="line">CourseId int not null,  --课程编号</span><br><span class="line">Score int not null, --考试分数</span><br><span class="line">)</span><br><span class="line">insert into Exam(StuId,CourseId,Score) values(1,1,90)</span><br><span class="line">insert into Exam(StuId,CourseId,Score) values(1,2,80)</span><br><span class="line">insert into Exam(StuId,CourseId,Score) values(2,2,85)</span><br><span class="line"></span><br><span class="line">select * from Student inner join Exam on Student.StuId = Exam.StuId</span><br><span class="line">inner join Course on Course.CourseId = Exam.CourseId</span><br></pre></td></tr></table></figure><p><strong>第三范式：</strong>要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖 ；</p><p>如有如下表结构设计：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Student</span><br><span class="line">(</span><br><span class="line">StuId varchar(20) primary key,--学号</span><br><span class="line">StuName varchar(20) not null,--学生姓名</span><br><span class="line">ProfessionalId int not null,--专业编号</span><br><span class="line">ProfessionalName varchar(50),--专业名称</span><br><span class="line">ProfessionalRemark varchar(200), --专业介绍</span><br><span class="line">)</span><br><span class="line">insert into Student(StuId,StuName,ProfessionalId,ProfessionalName,ProfessionalRemark)</span><br><span class="line">values(&#x27;001&#x27;,&#x27;刘备&#x27;,1,&#x27;计算机&#x27;,&#x27;最牛的专业&#x27;)</span><br><span class="line">insert into Student(StuId,StuName,ProfessionalId,ProfessionalName,ProfessionalRemark)</span><br><span class="line">values(&#x27;002&#x27;,&#x27;关羽&#x27;,2,&#x27;工商管理&#x27;,&#x27;管理学的基础专业&#x27;)</span><br><span class="line">insert into Student(StuId,StuName,ProfessionalId,ProfessionalName,ProfessionalRemark)</span><br><span class="line">values(&#x27;003&#x27;,&#x27;张飞&#x27;,1,&#x27;计算机&#x27;,&#x27;最牛的专业&#x27;)</span><br><span class="line">select * from Student</span><br></pre></td></tr></table></figure><p>上述设计种专业名称字段和专业介绍字段，在数据库种会产生很多冗余数据，不满足第二范式，优化方案如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Professional</span><br><span class="line">(</span><br><span class="line">ProfessionalId int primary key identity(1,1),--专业编号</span><br><span class="line">ProfessionalName varchar(50),--专业名称</span><br><span class="line">ProfessionalRemark varchar(200), --专业介绍</span><br><span class="line">)</span><br><span class="line">create table Student</span><br><span class="line">(</span><br><span class="line">StuId varchar(20) primary key,--学号</span><br><span class="line">StuName varchar(20) not null,--学生姓名</span><br><span class="line">ProfessionalId int not null,--专业编号</span><br><span class="line">)</span><br><span class="line">insert into Professional(ProfessionalName,ProfessionalRemark) values(&#x27;计算机&#x27;,&#x27;最牛的专业&#x27;)</span><br><span class="line">insert into Professional(ProfessionalName,ProfessionalRemark) values(&#x27;工商管理&#x27;,&#x27;管理学的基础专业&#x27;)</span><br><span class="line">insert into Student(StuId,StuName,ProfessionalId) values(&#x27;001&#x27;,&#x27;刘备&#x27;,1)</span><br><span class="line">insert into Student(StuId,StuName,ProfessionalId) values(&#x27;002&#x27;,&#x27;关羽&#x27;,2)</span><br><span class="line">insert into Student(StuId,StuName,ProfessionalId) values(&#x27;003&#x27;,&#x27;张飞&#x27;,1)</span><br><span class="line">select * from Student</span><br></pre></td></tr></table></figure><h2 id="二、表关系"><a href="#二、表关系" class="headerlink" title="二、表关系"></a>二、表关系</h2><p><strong>（1）一对多关系（专业–学生）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Profession  --专业</span><br><span class="line">(</span><br><span class="line">ProId int primary key identity(1,1), --专业编号</span><br><span class="line">ProName varchar(50) not null --专业名称</span><br><span class="line">)</span><br><span class="line">create table Student --学生</span><br><span class="line">(</span><br><span class="line">StuId int primary key identity(1,1), --学生编号</span><br><span class="line">ProId int references Profession(ProId),</span><br><span class="line">StuName varchar(50) not null, --学生名字</span><br><span class="line">StuSex char(2) not null --学生性别</span><br><span class="line">)</span><br><span class="line">insert into Profession(ProName) values(&#x27;软件开发&#x27;)</span><br><span class="line">insert into Profession(ProName) values(&#x27;企业信息化&#x27;)</span><br><span class="line">insert into Student(ProId,StuName,StuSex) values(1,&#x27;刘备&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(ProId,StuName,StuSex) values(1,&#x27;关羽&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(ProId,StuName,StuSex) values(2,&#x27;张飞&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(ProId,StuName,StuSex) values(2,&#x27;赵云&#x27;,&#x27;男&#x27;)</span><br><span class="line">select * from Student left join Profession on Student.ProId = Profession.ProId</span><br></pre></td></tr></table></figure><p><strong>（2）一对一关系（学生基本信息–学生详情）</strong></p><p><strong>方案一：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table StudentBasicInfo  --学生基本信息</span><br><span class="line">(</span><br><span class="line">StuNo varchar(20) primary key not null,  --学号</span><br><span class="line">StuName varchar(20) not null, --姓名</span><br><span class="line">StuSex nvarchar(1) not null  --性别</span><br><span class="line">)</span><br><span class="line">create table StudentDetailInfo  --学生详细信息</span><br><span class="line">(</span><br><span class="line">StuNo varchar(20) primary key not null,</span><br><span class="line">StuQQ varchar(20), --QQ</span><br><span class="line">stuPhone varchar(20), --电话</span><br><span class="line">StuMail varchar(100), --邮箱</span><br><span class="line">StuBirth date         --生日</span><br><span class="line">)</span><br><span class="line">--插入数据的时候按照顺序先插入刘备的基本信息，在插入关羽的基本信息</span><br><span class="line">--insert into StudentBasicInfo(StuNo,StuName,StuSex) values(&#x27;QH001&#x27;,&#x27;刘备&#x27;,&#x27;男&#x27;)</span><br><span class="line">--insert into StudentBasicInfo(StuNo,StuName,StuSex) values(&#x27;QH002&#x27;,&#x27;关羽&#x27;,&#x27;男&#x27;)</span><br><span class="line">--插入数据的时候按照顺序先插入关羽的详细信息，在插入刘备的详细信息</span><br><span class="line">--insert into StudentDetailInfo(StuNo,StuQQ,stuPhone,StuMail,StuBirth)</span><br><span class="line">--values(&#x27;QH002&#x27;,&#x27;156545214&#x27;,&#x27;13654525478&#x27;,&#x27;guanyu@163.com&#x27;,&#x27;1996-6-6&#x27;)</span><br><span class="line">--insert into StudentDetailInfo(StuNo,StuQQ,stuPhone,StuMail,StuBirth)</span><br><span class="line">--values(&#x27;QH001&#x27;,&#x27;186587854&#x27;,&#x27;15326545214&#x27;,&#x27;liubei@163.com&#x27;,&#x27;1998-8-8&#x27;)</span><br><span class="line"></span><br><span class="line">--或者如下结构也行：</span><br><span class="line">create table StudentBasicInfo  --学生基本信息</span><br><span class="line">(</span><br><span class="line">StuNo int primary key identity(1,1),  --学号</span><br><span class="line">StuName varchar(20) not null, --姓名</span><br><span class="line">StuSex nvarchar(1) not null  --性别</span><br><span class="line">)</span><br><span class="line">create table StudentDetailInfo  --学生详细信息</span><br><span class="line">(</span><br><span class="line">StuNo int primary key,  --学号</span><br><span class="line">StuQQ varchar(20), --QQ</span><br><span class="line">stuPhone varchar(20), --电话</span><br><span class="line">StuMail varchar(100), --邮箱</span><br><span class="line">StuBirth date         --生日</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此方案要求两个表的主键相等关系确定一个学生，所以此设计必须保证主键是可以维护和编辑的，如果主键是自动增长，将很大程度增加了数据维护的难度。</p><p><strong>方案二：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table StudentBasicInfo  --学生基本信息</span><br><span class="line">(</span><br><span class="line">StuNo int primary key identity(1,1),  --学号</span><br><span class="line">StuName varchar(20) not null, --姓名</span><br><span class="line">StuSex nvarchar(1) not null  --性别</span><br><span class="line">)</span><br><span class="line">create table StudentDetailInfo  --学生详细信息</span><br><span class="line">(</span><br><span class="line">StuDetailNo int primary key identity(1,1),  --详细信息编号</span><br><span class="line">StuNo int references StudentBasicInfo(StuNo) --学号,外键</span><br><span class="line">StuQQ varchar(20), --QQ</span><br><span class="line">stuPhone varchar(20), --电话</span><br><span class="line">StuMail varchar(100), --邮箱</span><br><span class="line">StuBirth date         --生日</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此方案中实际上我们是使用一对多的模式来表示一对一，保证多的表中只有一条对应数据即可。</p><p><strong>（3）多对多关系：（选课成绩–学生）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Course --课程</span><br><span class="line">(</span><br><span class="line">CourseId int primary key identity(1,1),--课程编号</span><br><span class="line">CourseName varchar(30) not null, --课程名称</span><br><span class="line">CourseContent text --课程介绍</span><br><span class="line">)</span><br><span class="line">insert into Course(CourseName,CourseContent) values(&#x27;HTML&#x27;,&#x27;静态网页的制作&#x27;)</span><br><span class="line">insert into Course(CourseName,CourseContent) values(&#x27;WinForm&#x27;,&#x27;Windows应用程序开发&#x27;)</span><br><span class="line"></span><br><span class="line">create table Student --学生</span><br><span class="line">(</span><br><span class="line">StuId int primary key identity(1,1), --学生编号</span><br><span class="line">StuName varchar(50) not null, --学生名字</span><br><span class="line">StuSex char(2) not null --学生性别</span><br><span class="line">)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;刘备&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;关羽&#x27;,&#x27;男&#x27;)</span><br><span class="line"></span><br><span class="line">create Table Exam --考试信息表</span><br><span class="line">(</span><br><span class="line">ExamId int primary key identity(1,1), --选课成绩编号</span><br><span class="line">StuId int not null, --学生编号</span><br><span class="line">CourseId int not null,  --课程编号</span><br><span class="line">Score int not null, --考试分数</span><br><span class="line">)</span><br><span class="line">insert into Exam(StuId,CourseId,Score) values(1,1,90)</span><br><span class="line">insert into Exam(StuId,CourseId,Score) values(1,2,80)</span><br><span class="line">insert into Exam(StuId,CourseId,Score) values(2,2,85)</span><br><span class="line"></span><br><span class="line">select * from Student inner join Exam on Student.StuId = Exam.StuId</span><br><span class="line">inner join Course on Course.CourseId = Exam.CourseId</span><br></pre></td></tr></table></figure><p>此方案中，一个学生可以有多门选课，一门课程也可以被多个学生选择，我们称之为多对多关系，在处理多对多关系的时候，我们需要建立一个中间关联表，该关联表中需要有另外两张表的主键字段。</p><h2 id="三、数据库设计案例"><a href="#三、数据库设计案例" class="headerlink" title="三、数据库设计案例"></a>三、数据库设计案例</h2><p><strong>业务需求说明：</strong><br>模拟银行业务，设计简易版的银行数据库表结构，要求可以完成以下基本功能需求：<br>1.银行开户（注册个人信息）及开卡（办理银行卡）（一个人可以办理多张银行卡，但是最多只能办理3张）<br>2.存钱<br>3.查询余额<br>4.取钱<br>5.转账<br>6.查看交易记录<br>7.账户挂失<br>8.账户注销</p><p><strong>表设计：</strong></p><p>1.账户信息表：存储个人信息。<br>2.银行卡表：存储银行卡信息。<br>3.交易信息表（存储存钱和取钱的记录）<br>4.转账信息表（存储转账信息记录）<br>5.状态信息变化表（存储银行卡状态变化的记录，状态有1:正常,2:挂失,3:冻结,4:注销）</p><p><strong>表结构设计：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--账户信息表：存储个人信息</span><br><span class="line">create table AccountInfo</span><br><span class="line">(</span><br><span class="line">AccountId int primary key identity(1,1), --账户编号</span><br><span class="line">AccountCode varchar(20) not null, --身份证号码</span><br><span class="line">AccountPhone varchar(20) not null, --电话号码</span><br><span class="line">RealName varchar(20) not null, --真实姓名</span><br><span class="line">OpenTime smalldatetime not null, --开户时间</span><br><span class="line">)</span><br><span class="line">--银行卡表：存储银行卡信息</span><br><span class="line">create table BankCard</span><br><span class="line">(</span><br><span class="line">CardNo varchar(30) primary key, --银行卡卡号</span><br><span class="line">AccountId int not null, --账户编号（与账户信息表形成主外键关系）</span><br><span class="line">CardPwd varchar(30) not null, --银行卡密码</span><br><span class="line">CardMoney money not null, --银行卡余额</span><br><span class="line">CardState int not null,--1:正常,2:挂失,3:冻结,4:注销</span><br><span class="line">CardTime smalldatetime default(getdate()) --开卡时间</span><br><span class="line">)</span><br><span class="line">--交易信息表（存储存钱和取钱的记录）</span><br><span class="line">create table CardExchange</span><br><span class="line">(</span><br><span class="line">ExchangeId int primary key identity(1,1), --交易自动编号</span><br><span class="line">CardNo varchar(30) not null, --银行卡号(与银行卡表形成主外键关系)</span><br><span class="line">MoneyInBank money not null, --存钱金额</span><br><span class="line">MoneyOutBank money not null, --取钱金额</span><br><span class="line">ExchangeTime smalldatetime not null, --交易时间</span><br><span class="line">)</span><br><span class="line">--转账信息表（存储转账信息记录）</span><br><span class="line">create table CardTransfer</span><br><span class="line">(</span><br><span class="line">TransferId int primary key identity(1,1),--转账自动编号</span><br><span class="line">CardNoOut varchar(30) not null, --转出银行卡号(与银行卡表形成主外键关系)</span><br><span class="line">CardNoIn varchar(30) not null, --转入银行卡号(与银行卡表形成主外键关系)</span><br><span class="line">TransferMoney money not null,--交易金额</span><br><span class="line">TransferTime smalldatetime not null, --交易时间</span><br><span class="line">)</span><br><span class="line">--状态信息变化表（存储银行卡状态变化的记录，状态有1:正常,2:挂失,3:冻结,4:注销）</span><br><span class="line">create table CardStateChange</span><br><span class="line">(</span><br><span class="line">StateId int primary key identity(1,1),--状态信息自动编号</span><br><span class="line">CardNo varchar(30) not null, --银行卡号(与银行卡表形成主外键关系)</span><br><span class="line">OldState int not null, --银行卡原始状态</span><br><span class="line">NewState int not null, --银行卡新状态</span><br><span class="line">StateWhy varchar(200) not null, --状态变化原因</span><br><span class="line">StateTime smalldatetime not null, --记录产生时间</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>添加测试数据：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--为刘备，关羽，张飞三个人进行开户开卡的操作</span><br><span class="line">--刘备身份证：420107198905064135</span><br><span class="line">--关羽身份证：420107199507104133</span><br><span class="line">--张飞身份证：420107199602034138</span><br><span class="line">insert into AccountInfo(AccountCode,AccountPhone,RealName,OpenTime)</span><br><span class="line">values(&#x27;420107198905064135&#x27;,&#x27;13554785425&#x27;,&#x27;刘备&#x27;,GETDATE())</span><br><span class="line">insert into BankCard(CardNo,AccountId,CardPwd,CardMoney,CardState)</span><br><span class="line">values(&#x27;6225125478544587&#x27;,1,&#x27;123456&#x27;,0,1)</span><br><span class="line"></span><br><span class="line">insert into AccountInfo(AccountCode,AccountPhone,RealName,OpenTime)</span><br><span class="line">values(&#x27;420107199507104133&#x27;,&#x27;13454788854&#x27;,&#x27;关羽&#x27;,GETDATE())</span><br><span class="line">insert into BankCard(CardNo,AccountId,CardPwd,CardMoney,CardState)</span><br><span class="line">values(&#x27;6225547858741263&#x27;,2,&#x27;123456&#x27;,0,1)</span><br><span class="line"></span><br><span class="line">insert into AccountInfo(AccountCode,AccountPhone,RealName,OpenTime)</span><br><span class="line">values(&#x27;420107199602034138&#x27;,&#x27;13456896321&#x27;,&#x27;张飞&#x27;,GETDATE())</span><br><span class="line">insert into BankCard(CardNo,AccountId,CardPwd,CardMoney,CardState)</span><br><span class="line">values(&#x27;6225547854125656&#x27;,3,&#x27;123456&#x27;,0,1)</span><br><span class="line"></span><br><span class="line">select * from AccountInfo</span><br><span class="line">select * from BankCard</span><br><span class="line"></span><br><span class="line">--进行存钱操作，刘备存钱2000元，关羽存钱：8000元，张飞存钱：500000元</span><br><span class="line">select * from AccountInfo</span><br><span class="line">update BankCard set CardMoney = CardMoney + 2000 where CardNo = &#x27;6225125478544587&#x27;</span><br><span class="line">insert into CardExchange(CardNo,MoneyInBank,MoneyOutBank,ExchangeTime)</span><br><span class="line">values(&#x27;6225125478544587&#x27;,2000,0,GETDATE())</span><br><span class="line"></span><br><span class="line">update BankCard set CardMoney = CardMoney + 8000 where CardNo = &#x27;6225547858741263&#x27;</span><br><span class="line">insert into CardExchange(CardNo,MoneyInBank,MoneyOutBank,ExchangeTime)</span><br><span class="line">values(&#x27;6225547858741263&#x27;,8000,0,GETDATE())</span><br><span class="line"></span><br><span class="line">update BankCard set CardMoney = CardMoney + 500000 where CardNo = &#x27;6225547854125656&#x27;</span><br><span class="line">insert into CardExchange(CardNo,MoneyInBank,MoneyOutBank,ExchangeTime)</span><br><span class="line">values(&#x27;6225547854125656&#x27;,500000,0,GETDATE())</span><br><span class="line"></span><br><span class="line">--转账：刘备给张飞转账1000元</span><br><span class="line">update BankCard set CardMoney = CardMoney -1000 where CardNo = &#x27;6225125478544587&#x27;</span><br><span class="line">update BankCard set CardMoney = CardMoney + 1000 where CardNo = &#x27;6225547854125656&#x27;</span><br><span class="line">insert into CardTransfer(CardNoOut,CardNoIn,TransferMoney,TransferTime)</span><br><span class="line">values(&#x27;6225125478544587&#x27;,&#x27;6225547854125656&#x27;,1000,GETDATE())</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL编程"><a href="#使用T-SQL编程" class="headerlink" title="使用T-SQL编程"></a>使用T-SQL编程</h1><h2 id="一、信息打印"><a href="#一、信息打印" class="headerlink" title="一、信息打印"></a>一、信息打印</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--print:直接打印消息</span><br><span class="line">--select:在表格中打印消息，可以设置多列，以及每一列的名字</span><br></pre></td></tr></table></figure><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><p><strong>T-SQL中变量分为局部变量和全局变量</strong></p><p><strong>局部变量：（1）以@作为前缀（2）先声明，在赋值</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @str varchar(20)</span><br><span class="line">set @str = &#x27;我爱数据库编程&#x27; --或者select @str = &#x27;我爱数据库编程&#x27;</span><br><span class="line">print @str</span><br></pre></td></tr></table></figure><p>备注：set赋值和select赋值区别：</p><p>set：赋给变量指定的值</p><p>select：一般用于从表中查询出的数据，查询记录如果有多条，将最后一条记录的值赋给变量，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @变量名 = 字段名 from 表名</span><br></pre></td></tr></table></figure><p>在赋值过程中，如果是表中查询的数据，如果记录只有一条，使用set和select都可以，但是习惯上使用select。</p><p><strong>全局变量：（1）以@@作为前缀（2）由系统进行定义和维护,只读</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--@@ERROR：返回执行的上一个语句的错误号</span><br><span class="line">--@@IDENTITY：返回最后插入的标识值</span><br><span class="line">--@@MAX_CONNECTIONS：返回允许同时进行的最大用户连接数</span><br><span class="line">--@@ROWCOUNT：返回受上一语句影响的行数</span><br><span class="line">--@@SERVERNAME：返回运行 SQL Server 的本地服务器的名称</span><br><span class="line">--@@SERVICENAME：返回 SQL Server 正在其下运行的注册表项的名称</span><br><span class="line">--@@TRANCOUNT：返回当前连接的活动事务数</span><br><span class="line">--@@LOCK_TIMEOUT：返回当前会话的当前锁定超时设置（毫秒）</span><br></pre></td></tr></table></figure><p><strong>变量示例：</strong></p><p>（1）为赵云此人进行开户开卡操作，赵云身份证：420107199904054233</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @AccountId int</span><br><span class="line">insert into AccountInfo(AccountCode,AccountPhone,RealName,OpenTime)</span><br><span class="line">values(&#x27;420107199904054233&#x27;,&#x27;15878547898&#x27;,&#x27;赵云&#x27;,GETDATE())</span><br><span class="line">set @AccountId = @@identity</span><br><span class="line">insert into BankCard(CardNo,AccountId,CardPwd,CardMoney,CardState)</span><br><span class="line">values(&#x27;6225123412357896&#x27;,@AccountId,&#x27;123456&#x27;,0,1)</span><br></pre></td></tr></table></figure><p>（2）需要求出张飞的银行卡卡号和余额，张飞身份证：420107199602034138</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：连接查询</span><br><span class="line">select CardNo 卡号, CardMoney 余额 from BankCard </span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">where AccountCode = &#x27;420107199602034138&#x27;</span><br><span class="line">--方案二：使用变量</span><br><span class="line">declare @AccountId int</span><br><span class="line">select @AccountId =  (select AccountId from AccountInfo where AccountCode = &#x27;420107199602034138&#x27;)</span><br><span class="line">select CardNo 卡号, CardMoney 余额 from BankCard where BankCard.AccountId = @AccountId</span><br></pre></td></tr></table></figure><h2 id="三、go语句"><a href="#三、go语句" class="headerlink" title="三、go语句"></a>三、go语句</h2><p>go语句：</p><p>（1）等待go语句前的代码执行完成后，再执行go后面的代码。</p><p>（2）批处理语句的结束标志。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--下面的@num变量作用域为全局</span><br><span class="line">--declare @num int</span><br><span class="line">--set @num = 0</span><br><span class="line"></span><br><span class="line">--下面的@num变量的作用域是局部，只在两个go之间可以使用，最后一行代码会报错</span><br><span class="line">--.........sql代码</span><br><span class="line">--go</span><br><span class="line">--declare @num int</span><br><span class="line">--set @num = 0</span><br><span class="line">--go</span><br><span class="line">--set @num = 1</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>T-SQL中使用的运算符分为7种</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">算数运算符：加（+）、减（-）、乘（*）、除（/）、模（%） </span><br><span class="line">逻辑运算符：AND、OR、LIKE、BETWEEN、IN、EXISTS、NOT、ALL、ANY、 </span><br><span class="line">赋值运算符：= </span><br><span class="line">字符串运算符：+ </span><br><span class="line">比较运算符：=、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt; </span><br><span class="line">位运算符：|、&amp;、^ </span><br><span class="line">复合运算符：+=、-=、/=、%=、*=</span><br></pre></td></tr></table></figure><h2 id="运算符示例"><a href="#运算符示例" class="headerlink" title="运算符示例"></a>运算符示例</h2><p>（1）已知长方形的长和宽，求长方形的周长和面积</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @c int = 5</span><br><span class="line">declare @k int = 10</span><br><span class="line">declare @zc int</span><br><span class="line">declare @mj int</span><br><span class="line">set @zc = (@c+@k)*2</span><br><span class="line">set @mj = @c * @k</span><br><span class="line">print &#x27;周长为:&#x27; + Convert(varchar(20),@zc)</span><br><span class="line">print &#x27;面积为:&#x27; + Convert(varchar(20),@mj)</span><br></pre></td></tr></table></figure><p>（2）查询银行卡状态为冻结，并且余额超过1000000的银行卡信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from BankCard where CardState = 3 and CardMoney &gt; 1000000</span><br></pre></td></tr></table></figure><p>（3）查询出银行卡状态为冻结或者余额等于0的银行卡信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from BankCard where CardState = 3 or CardMoney = 0</span><br></pre></td></tr></table></figure><p>（4）查询出姓名中含有’刘’的账户信息以及银行卡信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from AccountInfo left join BankCard on AccountInfo.AccountId = BankCard.AccountId where RealName like &#x27;%刘%&#x27;</span><br></pre></td></tr></table></figure><p>（5）查询出余额在2000-5000之间的银行卡信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from BankCard where CardMoney between 2000 and 5000</span><br></pre></td></tr></table></figure><p>（6）查询出银行卡状态为冻结或者注销的银行卡信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from BankCard where CardState in(3,4)</span><br></pre></td></tr></table></figure><p>（7）关羽身份证：420107199507104133，关羽到银行来开户，查询身份证在账户表是否存在，不存在则进行开户开卡，存在则不开户直接开卡。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @AccountId int</span><br><span class="line">if exists(select * from AccountInfo where AccountCode = &#x27;420107199507104133&#x27;)</span><br><span class="line">begin</span><br><span class="line">select @AccountId = (select AccountId from AccountInfo where AccountCode = &#x27;420107199507104133&#x27;)</span><br><span class="line">insert into BankCard(CardNo,AccountId,CardPwd,CardMoney,CardState)</span><br><span class="line">values(&#x27;6225456875357896&#x27;,@AccountId,&#x27;123456&#x27;,0,1)</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">begin</span><br><span class="line">insert into AccountInfo(AccountCode,AccountPhone,RealName,OpenTime)</span><br><span class="line">values(&#x27;420107199507104133&#x27;,&#x27;13335645213&#x27;,&#x27;关羽&#x27;,GETDATE())</span><br><span class="line">set @AccountId = @@identity</span><br><span class="line">insert into BankCard(CardNo,AccountId,CardPwd,CardMoney,CardState)</span><br><span class="line">values(&#x27;6225456875357896&#x27;,@AccountId,&#x27;123456&#x27;,0,1)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>上述代码也可以使用not exists进行判断，表示不存在。</p><p>扩展：上面需求添加一个限制即一个人最多只能开3张银行卡。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @AccountId int</span><br><span class="line">declare @count int</span><br><span class="line">if exists(select * from AccountInfo where AccountCode = &#x27;420107199507104133&#x27;)</span><br><span class="line">begin</span><br><span class="line">select @AccountId = (select AccountId from AccountInfo where AccountCode = &#x27;420107199507104133&#x27;)</span><br><span class="line">select @count = (select COUNT(*) from BankCard where AccountId = @AccountId)</span><br><span class="line">if @count &lt;= 2</span><br><span class="line">            begin</span><br><span class="line">                insert into BankCard(CardNo,AccountId,CardPwd,CardMoney,CardState)</span><br><span class="line">                values(&#x27;6225456875357898&#x27;,@AccountId,&#x27;123456&#x27;,0,1)</span><br><span class="line">            end</span><br><span class="line">else</span><br><span class="line">            begin</span><br><span class="line">                print &#x27;一个人最多只能办理三张银行卡&#x27;</span><br><span class="line">            end</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">begin</span><br><span class="line">insert into AccountInfo(AccountCode,AccountPhone,RealName,OpenTime)</span><br><span class="line">values(&#x27;420107199507104133&#x27;,&#x27;13335645213&#x27;,&#x27;关羽&#x27;,GETDATE())</span><br><span class="line">set @AccountId = @@identity</span><br><span class="line">insert into BankCard(CardNo,AccountId,CardPwd,CardMoney,CardState)</span><br><span class="line">values(&#x27;6225456875357898&#x27;,@AccountId,&#x27;123456&#x27;,0,1)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>（8）查询银行卡账户余额，是不是所有的账户余额都超过了3000。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 3000 &lt; ALL(select CardMoney from BankCard) </span><br><span class="line">print &#x27;所有账户余额都超过了3000&#x27;</span><br><span class="line">else</span><br><span class="line">print &#x27;存在有余额不超过3000的账户&#x27;</span><br></pre></td></tr></table></figure><p>（9）查询银行卡账户余额，是否含有账户余额超过30000000的信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 30000000 &lt; ANY(select CardMoney from BankCard) </span><br><span class="line">print &#x27;存在账户余额超过30000000的账户&#x27;</span><br><span class="line">else</span><br><span class="line">print &#x27;不存在账户余额超过30000000的账户&#x27;</span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="一、选择分之结构"><a href="#一、选择分之结构" class="headerlink" title="一、选择分之结构"></a>一、选择分之结构</h2><p>（1）某用户银行卡号为“6225547854125656”，该用户执行取钱操作，取钱5000元，余额充足则进行取钱操作，并提示”取钱成功”，否则提示“余额不足”。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @balance money</span><br><span class="line">select @balance = (select CardMoney from BankCard where CardNo=&#x27;6225547854125656&#x27;)</span><br><span class="line">if @balance &gt;= 5000</span><br><span class="line">begin</span><br><span class="line">update BankCard set CardMoney = CardMoney - 5000</span><br><span class="line">insert into CardExchange(CardNo,MoneyInBank,MoneyOutBank,ExchangeTime)</span><br><span class="line">values(&#x27;6225547854125656&#x27;,0,5000,GETDATE())</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">print &#x27;余额不足&#x27;</span><br></pre></td></tr></table></figure><p>（2）查询银行卡信息，将银行卡状态1,2,3,4分别转换为汉字“正常,挂失,冻结,注销”，并且根据银行卡余额显示银行卡等级 30万以下为“普通用户”,30万及以上为”VIP用户”，显示列分别为卡号，身份证，姓名，余额，用户等级，银行卡状态。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额,</span><br><span class="line">case</span><br><span class="line">when CardMoney &lt; 300000 then &#x27;普通用户&#x27;</span><br><span class="line">else &#x27;VIP用户&#x27; </span><br><span class="line">end 用户等级,</span><br><span class="line">case</span><br><span class="line">when CardState = 1 then &#x27;正常&#x27;</span><br><span class="line">when CardState = 2 then &#x27;挂失&#x27;</span><br><span class="line">when CardState = 3 then &#x27;冻结&#x27;</span><br><span class="line">when CardState = 4 then &#x27;注销&#x27;</span><br><span class="line">else &#x27;异常&#x27;</span><br><span class="line">end 卡状态</span><br><span class="line">from BankCard inner join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br></pre></td></tr></table></figure><p>或如下写法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额,</span><br><span class="line">case</span><br><span class="line">when CardMoney &lt; 300000 then &#x27;普通用户&#x27;</span><br><span class="line">else &#x27;VIP用户&#x27; </span><br><span class="line">end 用户等级,</span><br><span class="line">case CardState</span><br><span class="line">when 1 then &#x27;正常&#x27;</span><br><span class="line">when 2 then &#x27;挂失&#x27;</span><br><span class="line">when 3 then &#x27;冻结&#x27;</span><br><span class="line">when 4 then &#x27;注销&#x27;</span><br><span class="line">else &#x27;异常&#x27;</span><br><span class="line">end 卡状态</span><br><span class="line">from BankCard inner join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br></pre></td></tr></table></figure><h2 id="二、循环结构"><a href="#二、循环结构" class="headerlink" title="二、循环结构"></a>二、循环结构</h2><p>（1）循环打印1-10。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @i int  = 1</span><br><span class="line">while @i &lt;= 10</span><br><span class="line">begin</span><br><span class="line">print @i</span><br><span class="line">set @i = @i + 1</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>（2）循环打印九九乘法表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @i int = 1</span><br><span class="line">declare @str varchar(1000)</span><br><span class="line">while @i&lt;=9</span><br><span class="line">begin</span><br><span class="line">declare @j int = 1</span><br><span class="line">set @str = &#x27;&#x27;</span><br><span class="line">while @j &lt;= @i</span><br><span class="line">begin</span><br><span class="line">--方案一</span><br><span class="line">--set @str = @str + cast(@i as varchar(2)) + &#x27;*&#x27; + cast(@j as varchar(2)) + </span><br><span class="line">--&#x27;=&#x27; + cast(@i*@j as varchar(2)) + CHAR(9)</span><br><span class="line">--方案二</span><br><span class="line">set @str = @str + Convert(varchar(2),@i) + &#x27;*&#x27; + Convert(varchar(2),@j) + </span><br><span class="line">&#x27;=&#x27; + Convert(varchar(2),@i*@j) + CHAR(9)</span><br><span class="line">set @j = @j + 1</span><br><span class="line">end</span><br><span class="line">print @str</span><br><span class="line">set @i = @i + 1</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>备注：</p><p>（1）特殊字符：制表符CHAR(9)；换行符CHAR(10)；回车CHAR(13)；</p><p>（2）循环中若出现break和CONTINUE,作用与Java，C#等语言一致。</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>（1）关羽的银行卡号为”6225547858741263”，查询出余额比关羽多的银行卡信息，显示卡号，身份证，姓名，余额。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">declare @gyBalance money</span><br><span class="line">select @gyBalance = (select CardMoney from BankCard where CardNo=&#x27;6225547858741263&#x27;)</span><br><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额 from BankCard </span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">where CardMoney &gt; @gyBalance</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案二:</span><br><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额 from BankCard </span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">where CardMoney &gt; </span><br><span class="line">(select CardMoney from BankCard where CardNo=&#x27;6225547858741263&#x27;)</span><br></pre></td></tr></table></figure><p>（2）从所有账户信息中查询出余额最高的交易明细(存钱取钱信息)。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">select * from CardExchange where CardNo in </span><br><span class="line">(select CardNo from BankCard where CardMoney = </span><br><span class="line">  (select MAX(CardMoney) from BankCard)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案二：（如果有多个银行卡余额相等并且最高，此方案只能求出其中一个人的明细）</span><br><span class="line">select * from CardExchange where CardNo = </span><br><span class="line">(select top 1 CardNo from BankCard order by CardMoney desc)</span><br></pre></td></tr></table></figure><p>（3）查询有取款记录的银行卡及账户信息，显示卡号，身份证，姓名，余额。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额 from BankCard </span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">where CardNo in</span><br><span class="line">(select CardNo from CardExchange where MoneyOutBank &lt;&gt; 0)</span><br></pre></td></tr></table></figure><p>（4）查询出没有存款记录的银行卡及账户信息，显示卡号，身份证，姓名，余额。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额 from BankCard </span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">where CardNo not in</span><br><span class="line">(select CardNo from CardExchange where MoneyInBank &lt;&gt; 0)</span><br></pre></td></tr></table></figure><p>（5）关羽的银行卡号为”6225547858741263”,查询当天是否有收到转账。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if exists(select * from CardTransfer where CardNoIn = &#x27;6225547858741263&#x27;</span><br><span class="line">and convert(varchar(10),TransferTime, 120) = convert(varchar(10),getdate(), 120)</span><br><span class="line">)</span><br><span class="line">print &#x27;有转账记录&#x27;</span><br><span class="line">else</span><br><span class="line">print &#x27;没有转账记录&#x27;</span><br><span class="line">--备注：上述例子也可以使用not exists来实现，表示不不存在记录</span><br></pre></td></tr></table></figure><p>（6）查询出交易次数（存款取款操作）最多的银行卡账户信息，显示：卡号，身份证，姓名，余额，交易次数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一</span><br><span class="line">select top 1 BankCard.CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额,</span><br><span class="line">exchangeCount 交易次数 from BankCard </span><br><span class="line">inner join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">inner join</span><br><span class="line">(select CardNo,COUNT(*) exchangeCount from CardExchange group by CardNo) CarcExchageTemp</span><br><span class="line">on BankCard.CardNo = CarcExchageTemp.CardNo</span><br><span class="line">order by exchangeCount desc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案二(如果有多个人交易次数相同，都是交易次数最多，则使用以下方案)</span><br><span class="line">select  BankCard.CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额,交易次数 </span><br><span class="line">from AccountInfo</span><br><span class="line">inner join BankCard on AccountInfo.AccountId = BankCard.AccountId</span><br><span class="line">inner join</span><br><span class="line">(select CardNo,COUNT(*) 交易次数 from CardExchange group by CardNo) Temp </span><br><span class="line">on BankCard.CardNo = Temp.CardNo</span><br><span class="line">where 交易次数 = (select max(交易次数) from</span><br><span class="line">(select CardNo,COUNT(*) 交易次数 from CardExchange group by CardNo) Temp )</span><br></pre></td></tr></table></figure><p>（7）查询出没有转账交易记录的银行卡账户信息，显示卡号，身份证，姓名，余额。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额 from BankCard </span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">where BankCard.CardNo not in (select CardNoIn from CardTransfer)</span><br><span class="line">and BankCard.CardNo not in (select CardNoOut from CardTransfer)</span><br></pre></td></tr></table></figure><p>（8）分页。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--数据结构和数据如下：</span><br><span class="line">create table Student</span><br><span class="line">(</span><br><span class="line">StuId int primary key identity(1,2), --自动编号</span><br><span class="line">StuName varchar(20),</span><br><span class="line">StuSex varchar(4)</span><br><span class="line">)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;刘备&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;关羽&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;张飞&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;赵云&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;马超&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;黄忠&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;魏延&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;简雍&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;诸葛亮&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;徐庶&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;周仓&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;关平&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;张苞&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;曹操&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;曹仁&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;曹丕&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;曹植&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;曹彰&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;典韦&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;许褚&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;夏侯敦&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;郭嘉&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;荀彧&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;贾诩&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;孙权&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;孙坚&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;孙策&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;太史慈&#x27;,&#x27;男&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;大乔&#x27;,&#x27;女&#x27;)</span><br><span class="line">insert into Student(StuName,StuSex) values(&#x27;小乔&#x27;,&#x27;女&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：使用row_number分页</span><br><span class="line">declare @PageSize int = 5</span><br><span class="line">declare @PageIndex int = 1</span><br><span class="line">select * from (select ROW_NUMBER() over(order by StuId) RowId,Student.* from Student) TempStu</span><br><span class="line">where RowId between (@PageIndex-1)*@PageSize+1 and @PageIndex*@PageSize</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案二：使用top分页</span><br><span class="line">declare @PageSize int = 5</span><br><span class="line">declare @PageIndex int = 1</span><br><span class="line">select top(@PageSize) * from Student</span><br><span class="line">where StuId not in (select top((@PageIndex-1)*@PageSize) StuId from Student)</span><br></pre></td></tr></table></figure><h1 id="事务-索引-视图-游标"><a href="#事务-索引-视图-游标" class="headerlink" title="事务-索引-视图-游标"></a>事务-索引-视图-游标</h1><h2 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h2><p>人员信息如下：（第二列是身份证号，第三列是银行卡卡号）</p><p>–刘备  420107198905064135  6225125478544587<br>–关羽  420107199507104133  6225547858741263<br>–张飞  420107199602034138  6225547854125656</p><p>（1）假设刘备取款6000，(添加check约束，设置账户余额必须&gt;&#x3D;0)，要求：使用事务实现，修改余额和添加取款记录两步操作使用事务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin transaction</span><br><span class="line">declare @MyError int = 0</span><br><span class="line">update BankCard set CardMoney = CardMoney-6000 where CardNo = &#x27;6225125478544587&#x27;</span><br><span class="line">set @MyError = @MyError + @@ERROR</span><br><span class="line">insert into CardExchange(CardNo,MoneyInBank,MoneyOutBank,ExchangeTime)</span><br><span class="line">values(&#x27;6225125478544587&#x27;,0,6000,GETDATE())</span><br><span class="line">set @MyError = @MyError + @@ERROR</span><br><span class="line">if @MyError = 0</span><br><span class="line">begin</span><br><span class="line">commit transaction</span><br><span class="line">print &#x27;取款成功&#x27;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">begin</span><br><span class="line">rollback transaction</span><br><span class="line">print &#x27;余额不足&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>（2）假设刘备向张飞转账1000元，(添加check约束，设置账户余额必须&gt;&#x3D;0)；分析步骤有三步（1）张飞添加1000元，（2）刘备扣除1000元，（3）生成转账记录；使用事务解决此问题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin transaction</span><br><span class="line">declare @Error int = 0</span><br><span class="line">update BankCard set CardMoney = CardMoney -1000 where CardNo = &#x27;6225125478544587&#x27;</span><br><span class="line">set @Error = @@ERROR + @Error</span><br><span class="line">update BankCard set CardMoney = CardMoney + 1000 where CardNo = &#x27;6225547854125656&#x27;</span><br><span class="line">set @Error = @@ERROR + @Error</span><br><span class="line">insert into CardTransfer(CardNoOut,CardNoIn,TransferMoney,TransferTime)</span><br><span class="line">values(&#x27;6225125478544587&#x27;,&#x27;6225547854125656&#x27;,1000,GETDATE())</span><br><span class="line">set @Error = @@ERROR + @Error</span><br><span class="line">if @Error = 0</span><br><span class="line">begin</span><br><span class="line">commit</span><br><span class="line">print &#x27;转账成功&#x27;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">begin</span><br><span class="line">rollback</span><br><span class="line">print &#x27;转账失败&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><p>索引：提高检索查询效率。</p><p><strong>SQL SERVER索引类型：</strong>按存储结构区分：“聚集索引（又称聚类索引，簇集索引）”，“非聚集索引（非聚类索引，非簇集索引）”；</p><p>聚集索引：根据数据行的键值在表或视图中的排序存储这些数据行，每个表只有一个聚集索引。聚集索引是一种对磁盘上实际数据重新组织以按指定的一列或多列值排序(类似字典中的拼音索引)(物理存储顺序)。</p><p>非聚集索引：具有独立于数据行的结构，包含非聚集索引键值，且每个键值项都有指向包含该键值的数据行的指针。（类似字典中的偏旁部首索引）（逻辑存储顺序）。</p><p><strong>SQL SERVER索引其他分类：</strong></p><p>按数据唯一性区分：“唯一索引”，“非唯一索引”；按键列个数区分：“单列索引”，“多列索引”。</p><p><strong>创建索引的方式：</strong></p><ol><li>通过显式的CREATE INDEX命令 </li><li>在创建约束时作为隐含的对象 </li><li>主键约束(聚集索引) </li><li>唯一约束(唯一索引)</li></ol><p><strong>创建索引语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE [UNIQUE] [CLUSTERED | NONCLUSTERED]</span><br><span class="line">INDEX &lt;index name&gt; ON &lt;table or view name&gt;(&lt;column name&gt; [ASC|DESC][,...n])</span><br></pre></td></tr></table></figure><p><strong>索引基本示例语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--exp:创建一个非聚集索引</span><br><span class="line">--create nonclustered index indexAccount on AccountInfo(AccountCode)</span><br><span class="line">--删除一个索引</span><br><span class="line">--drop index indexAccount on AccountInfo</span><br></pre></td></tr></table></figure><p>备注：索引信息存储在系统视图sys.indexes中。</p><p><strong>按照指定索引进行查询</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from AccountInfo with(index=indexAccount) where AccountCode=&#x27;6225125478544587&#x27;</span><br></pre></td></tr></table></figure><h2 id="三、视图"><a href="#三、视图" class="headerlink" title="三、视图"></a>三、视图</h2><p>视图：可以理解成虚拟表。</p><p>（1）编写视图实现查询出所有银行卡账户信息，显示卡号，身份证，姓名，余额。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create view CardAndAccount as</span><br><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额 from BankCard </span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>如果要进行相应信息的查询，不需要编写复杂的SQL语句，直接使用视图，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from CardAndAccount</span><br></pre></td></tr></table></figure><h2 id="四、游标"><a href="#四、游标" class="headerlink" title="四、游标"></a>四、游标</h2><p>游标：定位到结果集中某一行。</p><p>游标分类：<br>（1）静态游标(Static)：在操作游标的时候，数据发生变化，游标中数据不变<br>（2）动态游标(Dynamic)：在操作游标的时候，数据发生变化，游标中数据改变，默认值。<br>（3）键集驱动游标(KeySet)：在操作游标的时候，被标识的列发生改变，游标中数据改变，其他列改变，游标中数据不变。</p><p>假设有如下表结构和数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Member</span><br><span class="line">(</span><br><span class="line">MemberId int primary key identity(1,1),</span><br><span class="line">MemberAccount nvarchar(20) unique check(len(MemberAccount) between 6 and 12),</span><br><span class="line">MemberPwd nvarchar(20),</span><br><span class="line">MemberNickname nvarchar(20),</span><br><span class="line">MemberPhone nvarchar(20)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into Member(MemberAccount,MemberPwd,MemberNickname,MemberPhone)</span><br><span class="line">values(&#x27;liubei&#x27;,&#x27;123456&#x27;,&#x27;刘备&#x27;,&#x27;4659874564&#x27;)</span><br><span class="line">insert into Member(MemberAccount,MemberPwd,MemberNickname,MemberPhone)</span><br><span class="line">values(&#x27;guanyu&#x27;,&#x27;123456&#x27;,&#x27;关羽&#x27;,&#x27;42354234124&#x27;)</span><br><span class="line">insert into Member(MemberAccount,MemberPwd,MemberNickname,MemberPhone)</span><br><span class="line">values(&#x27;zhangfei&#x27;,&#x27;123456&#x27;,&#x27;张飞&#x27;,&#x27;41253445&#x27;)</span><br><span class="line">insert into Member(MemberAccount,MemberPwd,MemberNickname,MemberPhone)</span><br><span class="line">values(&#x27;zhangyun&#x27;,&#x27;123456&#x27;,&#x27;赵云&#x27;,&#x27;75675676547&#x27;)</span><br><span class="line">insert into Member(MemberAccount,MemberPwd,MemberNickname,MemberPhone)</span><br><span class="line">values(&#x27;machao&#x27;,&#x27;123456&#x27;,&#x27;马超&#x27;,&#x27;532523523&#x27;)</span><br></pre></td></tr></table></figure><p><strong>创建游标：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--1.创建游标(Scroll代表滚动游标，不加Scroll则是只进的，只能支持fetch next)</span><br><span class="line">declare CURSORMember cursor scroll </span><br><span class="line">for select MemberAccount from Member</span><br></pre></td></tr></table></figure><p><strong>打开游标：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open  CURSORMember</span><br></pre></td></tr></table></figure><p><strong>提取数据：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch first from CURSORMember --结果集的第一行</span><br><span class="line">fetch last from CURSORMember  --最后一行</span><br><span class="line">fetch absolute 1 from CURSORMember --从游标的第一行开始数，第n行。</span><br><span class="line">fetch relative 3 from CURSORMember --从当前位置数，第n行。</span><br><span class="line">fetch next from CURSORMember --当前位置的下一行</span><br><span class="line">fetch prior from CURSORMember --当前位置的上一行</span><br></pre></td></tr></table></figure><p><strong>提取数据给变量以供它用（取出第3行用户名，查询该用户详细信息）：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @MemberAccount varchar(30)</span><br><span class="line">fetch absolute 3 from CURSORMember into @MemberAccount</span><br><span class="line">select * from Member where MemberAccount = @MemberAccount</span><br></pre></td></tr></table></figure><p><strong>利用游标提取所有的账户信息：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一：</span><br><span class="line">fetch absolute 1 from CURSORMember</span><br><span class="line">while @@FETCH_STATUS = 0  --@@FETCH_STATUS=0,提取成功，-1提取失败，-2行不存在</span><br><span class="line">begin</span><br><span class="line">fetch next from CURSORMember</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">--方案二：</span><br><span class="line">declare @MemberAccount varchar(30)</span><br><span class="line">--fetch next from CURSORMember into @MemberAccount</span><br><span class="line">fetch absolute 1 from CURSORMember into @MemberAccount</span><br><span class="line">while @@FETCH_STATUS = 0  --@@FETCH_STATUS=0,提取成功，-1提取失败，-2行不存在</span><br><span class="line">begin</span><br><span class="line">print &#x27;提取成功:&#x27; + @MemberAccount</span><br><span class="line">fetch next from CURSORMember into @MemberAccount</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>利用游标修改和删除数据：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch absolute 3 from CURSORMember</span><br><span class="line">update Member set MemberPwd = &#x27;1234567&#x27; where Current of CURSORMember</span><br><span class="line"></span><br><span class="line">fetch absolute 3 from CURSORMember</span><br><span class="line">delete Member where Current of CURSORMember</span><br></pre></td></tr></table></figure><p><strong>关闭游标：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">close CURSORMember</span><br></pre></td></tr></table></figure><p><strong>删除游标：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deallocate CURSORMember</span><br></pre></td></tr></table></figure><p><strong>创建游标指向某行多列数据,并循环显示数据：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--此处如果指向所有数据，可以将for后面的语句修改成select * from Member</span><br><span class="line">declare CURSORMember cursor scroll</span><br><span class="line">for select MemberAccount,MemberPwd,MemberNickname,MemberPhone from Member</span><br><span class="line"></span><br><span class="line">open CURSORMember</span><br><span class="line"></span><br><span class="line">declare @MemberAccount varchar(30)</span><br><span class="line">declare@MemberPwd nvarchar(20)</span><br><span class="line">declare@MemberNickname nvarchar(20)</span><br><span class="line">declare@MemberPhone nvarchar(20)</span><br><span class="line">fetch next from CURSORMember into @MemberAccount,@MemberPwd,@MemberNickname,@MemberPhone</span><br><span class="line">while @@FETCH_STATUS = 0  --@@FETCH_STATUS=0,提取成功，-1提取失败，-2行不存在</span><br><span class="line">begin</span><br><span class="line">print &#x27;提取成功:&#x27; + @MemberAccount+&#x27;,&#x27;+@MemberPwd+&#x27;,&#x27;+@MemberNickname+&#x27;,&#x27;+@MemberPhone</span><br><span class="line">fetch next from CURSORMember into @MemberAccount,@MemberPwd,@MemberNickname,@MemberPhone</span><br><span class="line">end</span><br><span class="line">close CURSORMember</span><br></pre></td></tr></table></figure><h1 id="函数-存储过程-触发器"><a href="#函数-存储过程-触发器" class="headerlink" title="函数-存储过程-触发器"></a>函数-存储过程-触发器</h1><h2 id="一、函数"><a href="#一、函数" class="headerlink" title="一、函数"></a>一、函数</h2><p>函数分为（1）系统函数，（2）自定义函数。</p><p>其中自定义函数又可以分为（1）标量值函数（返回单个值），（2）表值函数（返回查询结果）</p><p>本文主要介绍自定义函数的使用。</p><p>（1）编写一个函数求该银行的金额总和</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function GetSumCardMoney()</span><br><span class="line">returns money </span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">declare @AllMOney money</span><br><span class="line">select @AllMOney = (select SUM(CardMoney) from BankCard)</span><br><span class="line">return @AllMOney</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>函数调用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dbo.GetSumCardMoney()</span><br></pre></td></tr></table></figure><p>上述函数没有参数，下面介绍有参数的函数的定义及使用</p><p>（2）传入账户编号，返回账户真实姓名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function GetNameById(@AccountId int)</span><br><span class="line">returns  varchar(20)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">declare @RealName varchar(20)</span><br><span class="line">select @RealName = (select RealName from AccountInfo where AccountId = @AccountId)</span><br><span class="line">return @RealName</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>函数调用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print dbo.GetNameById(2)</span><br></pre></td></tr></table></figure><p>（3）传递开始时间和结束时间，返回交易记录（存钱取钱），交易记录中包含 真实姓名，卡号，存钱金额，取钱金额，交易时间。</p><p>方案一（逻辑复杂，函数内容除了返回结果的sql语句还有其他内容，例如定义变量等）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function GetExchangeByTime(@StartTime varchar(30),@EndTime varchar(30))</span><br><span class="line">returns @ExchangeTable table</span><br><span class="line">(</span><br><span class="line">RealName varchar(30),  --真实姓名</span><br><span class="line">CardNo varchar(30),    --卡号</span><br><span class="line">MoneyInBank money,     --存钱金额</span><br><span class="line">MoneyOutBank money,    --取钱金额</span><br><span class="line">ExchangeTime smalldatetime  --交易时间</span><br><span class="line">)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">insert into @ExchangeTable</span><br><span class="line">select AccountInfo.RealName,CardExchange.CardNo,CardExchange.MoneyInBank,</span><br><span class="line">CardExchange.MoneyOutBank,CardExchange.ExchangeTime from CardExchange</span><br><span class="line">left join BankCard on CardExchange.CardNo = BankCard.CardNo</span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">where CardExchange.ExchangeTime between @StartTime+&#x27; 00:00:00&#x27; and @EndTime+&#x27; 23:59:59&#x27;</span><br><span class="line">return</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>函数调用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from GetExchangeByTime(&#x27;2018-6-1&#x27;,&#x27;2018-7-1&#x27;)</span><br></pre></td></tr></table></figure><p>方案二（逻辑简单，函数内容直接是一条sql查询语句）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function GetExchangeByTime(@StartTime varchar(30),@EndTime varchar(30))</span><br><span class="line">returns table</span><br><span class="line">as</span><br><span class="line">return</span><br><span class="line">select AccountInfo.RealName,CardExchange.CardNo,CardExchange.MoneyInBank,</span><br><span class="line">CardExchange.MoneyOutBank,CardExchange.ExchangeTime from CardExchange</span><br><span class="line">left join BankCard on CardExchange.CardNo = BankCard.CardNo</span><br><span class="line">left join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">where CardExchange.ExchangeTime between @StartTime+&#x27; 00:00:00&#x27; and @EndTime+&#x27; 23:59:59&#x27;</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>函数调用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from GetExchangeByTime(&#x27;2018-6-19&#x27;,&#x27;2018-6-19&#x27;)</span><br></pre></td></tr></table></figure><p>（4）查询银行卡信息，将银行卡状态1,2,3,4分别转换为汉字“正常,挂失,冻结,注销”，根据银行卡余额显示银行卡等级 30万以下为“普通用户”,30万及以上为”VIP用户”，分别显示卡号，身份证，姓名，余额，用户等级，银行卡状态。</p><p>方案一：直接在sql语句中使用case when</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from AccountInfo</span><br><span class="line">select * from BankCard</span><br><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额,</span><br><span class="line">case</span><br><span class="line">when CardMoney &lt; 300000 then &#x27;普通用户&#x27;</span><br><span class="line">else &#x27;VIP用户&#x27; </span><br><span class="line">end 用户等级,</span><br><span class="line">case</span><br><span class="line">when CardState = 1 then &#x27;正常&#x27;</span><br><span class="line">when CardState = 2 then &#x27;挂失&#x27;</span><br><span class="line">when CardState = 3 then &#x27;冻结&#x27;</span><br><span class="line">when CardState = 4 then &#x27;注销&#x27;</span><br><span class="line">else &#x27;异常&#x27;</span><br><span class="line">end 卡状态</span><br><span class="line">from BankCard inner join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br></pre></td></tr></table></figure><p>方案二：将等级和状态用函数实现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function GetGradeByMoney(@myMoney int)</span><br><span class="line">returns varchar(10)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">declare @result varchar(10)</span><br><span class="line">if @myMoney &lt; 3000 </span><br><span class="line">set @result = &#x27;普通用户&#x27;</span><br><span class="line">else</span><br><span class="line">set @result = &#x27;VIP用户&#x27;</span><br><span class="line">return @result</span><br><span class="line">end</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">create function GetStatusByNumber(@myNum int)</span><br><span class="line">returns varchar(10)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">declare @result varchar(10)</span><br><span class="line">if @myNum = 1</span><br><span class="line">set @result = &#x27;正常&#x27;</span><br><span class="line">else if @myNum = 2</span><br><span class="line">set @result = &#x27;挂失&#x27;</span><br><span class="line">else if @myNum = 3</span><br><span class="line">set @result = &#x27;冻结&#x27;</span><br><span class="line">else if @myNum = 4</span><br><span class="line">set @result = &#x27;注销&#x27;</span><br><span class="line">else</span><br><span class="line">set @result = &#x27;异常&#x27;</span><br><span class="line">return @result</span><br><span class="line">end</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>函数调用实现查询功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select CardNo 卡号,AccountCode 身份证,RealName 姓名,CardMoney 余额,</span><br><span class="line">dbo.GetGradeByMoney(CardMoney) 账户等级,dbo.GetStatusByNumber(CardState) 卡状态</span><br><span class="line">from BankCard inner join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br></pre></td></tr></table></figure><p>（5）编写函数，根据出生日期求年龄，年龄求实岁，例如：</p><p>​生日为2000-5-5，当前为2018-5-4，年龄为17岁<br>​生日为2000-5-5，当前为2018-5-6，年龄为18岁</p><p>测试数据如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table Emp</span><br><span class="line">(</span><br><span class="line">EmpId int primary key identity(1,2), --自动编号</span><br><span class="line">empName varchar(20), --姓名</span><br><span class="line">empSex varchar(4),   --性别</span><br><span class="line">empBirth smalldatetime --生日</span><br><span class="line">)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;刘备&#x27;,&#x27;男&#x27;,&#x27;2008-5-8&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;关羽&#x27;,&#x27;男&#x27;,&#x27;1998-10-10&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;张飞&#x27;,&#x27;男&#x27;,&#x27;1999-7-5&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;赵云&#x27;,&#x27;男&#x27;,&#x27;2003-12-12&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;马超&#x27;,&#x27;男&#x27;,&#x27;2003-1-5&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;黄忠&#x27;,&#x27;男&#x27;,&#x27;1988-8-4&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;魏延&#x27;,&#x27;男&#x27;,&#x27;1998-5-2&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;简雍&#x27;,&#x27;男&#x27;,&#x27;1992-2-20&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;诸葛亮&#x27;,&#x27;男&#x27;,&#x27;1993-3-1&#x27;)</span><br><span class="line">insert into Emp(empName,empSex,empBirth) values(&#x27;徐庶&#x27;,&#x27;男&#x27;,&#x27;1994-8-5&#x27;)</span><br></pre></td></tr></table></figure><p>函数定义：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function GetAgeByBirth(@birth smalldatetime)</span><br><span class="line">returns int</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">declare @age int</span><br><span class="line">set @age = year(getdate()) - year(@birth)</span><br><span class="line">if month(getdate()) &lt; month(@birth)</span><br><span class="line">set @age = @age - 1</span><br><span class="line">if month(getdate()) = month(@birth) and day(getdate()) &lt; day(@birth)</span><br><span class="line">set @age = @age -1</span><br><span class="line">return @age</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>函数调用实现查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *,dbo.GetAgeByBirth(empBirth) 年龄 from Emp</span><br></pre></td></tr></table></figure><h2 id="二、触发器"><a href="#二、触发器" class="headerlink" title="二、触发器"></a>二、触发器</h2><p>触发器分类：（1） “Instead of”触发器（2）“After”触发器<br>“Instead of”触发器：在执行操作之前被执行<br>“After”触发器：在执行操作之后被执行</p><p>触发器中后面的案例中需要用到的表及测试数据如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--部门</span><br><span class="line">create table Department</span><br><span class="line">(</span><br><span class="line">DepartmentId varchar(10) primary key , --主键，自动增长</span><br><span class="line">DepartmentName nvarchar(50), --部门名称</span><br><span class="line">)</span><br><span class="line">--人员信息</span><br><span class="line">create table People</span><br><span class="line">(</span><br><span class="line">PeopleId int primary key identity(1,1), --主键,自动增长</span><br><span class="line">DepartmentId varchar(10), --部门编号,外键,与部门表关联</span><br><span class="line">PeopleName nvarchar(20), --人员姓名</span><br><span class="line">PeopleSex nvarchar(2), --人员性别</span><br><span class="line">PeoplePhone nvarchar(20), --电话，联系方式</span><br><span class="line">)</span><br><span class="line">insert into Department(DepartmentId,DepartmentName)</span><br><span class="line">values(&#x27;001&#x27;,&#x27;总经办&#x27;)</span><br><span class="line">insert into Department(DepartmentId,DepartmentName)</span><br><span class="line">values(&#x27;002&#x27;,&#x27;市场部&#x27;)</span><br><span class="line">insert into Department(DepartmentId,DepartmentName)</span><br><span class="line">values(&#x27;003&#x27;,&#x27;人事部&#x27;)</span><br><span class="line">insert into Department(DepartmentId,DepartmentName)</span><br><span class="line">values(&#x27;004&#x27;,&#x27;财务部&#x27;)</span><br><span class="line">insert into Department(DepartmentId,DepartmentName)</span><br><span class="line">values(&#x27;005&#x27;,&#x27;软件部&#x27;)</span><br><span class="line">insert into People(DepartmentId,PeopleName,PeopleSex,PeoplePhone)</span><br><span class="line">values(&#x27;001&#x27;,&#x27;刘备&#x27;,&#x27;男&#x27;,&#x27;13558785478&#x27;)</span><br><span class="line">insert into People(DepartmentId,PeopleName,PeopleSex,PeoplePhone)</span><br><span class="line">values(&#x27;001&#x27;,&#x27;关羽&#x27;,&#x27;男&#x27;,&#x27;13558788785&#x27;)</span><br><span class="line">insert into People(DepartmentId,PeopleName,PeopleSex,PeoplePhone)</span><br><span class="line">values(&#x27;002&#x27;,&#x27;张飞&#x27;,&#x27;男&#x27;,&#x27;13698547125&#x27;)</span><br></pre></td></tr></table></figure><p>（1）假设有部门表和员工表，在添加员工的时候，该员工的部门编号如果在部门表中找不到，则自动添加部门信息，部门名称为”新部门”。</p><p>编写触发器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create trigger tri_InsertPeople on People</span><br><span class="line">after insert</span><br><span class="line">as</span><br><span class="line">if not exists(select * from Department where DepartmentId = (select DepartmentId from inserted))</span><br><span class="line">insert into Department(DepartmentId,DepartmentName)</span><br><span class="line">values((select DepartmentId from inserted),&#x27;新部门&#x27;)</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>测试触发器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert People(DepartmentId,PeopleName,PeopleSex,PeoplePhone)</span><br><span class="line">values(&#x27;009&#x27;,&#x27;赵云&#x27;,&#x27;男&#x27;,&#x27;13854587456&#x27;)</span><br></pre></td></tr></table></figure><p>我们会发现，当插入赵云这个员工的时候会自动向部门表中添加数据。</p><p>（2）触发器实现，删除一个部门的时候将部门下所有员工全部删除。</p><p>编写触发器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create trigger tri_DeleteDept on Department</span><br><span class="line">after delete</span><br><span class="line">as</span><br><span class="line">delete from People where People.DepartmentId = </span><br><span class="line">(select DepartmentId from deleted)</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>测试触发器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete Department where DepartmentId = &#x27;001&#x27;</span><br></pre></td></tr></table></figure><p>我们会发现当我们删除此部门的时候，同时会删除该部门下的所有员工</p><p>（3）创建一个触发器，删除一个部门的时候判断该部门下是否有员工，有则不删除，没有则删除。</p><p>编写触发器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop trigger tri_DeleteDept--删除掉之前的触发器，因为当前触发器也叫这个名字</span><br><span class="line">create trigger tri_DeleteDept on Department</span><br><span class="line">Instead of delete</span><br><span class="line">as</span><br><span class="line">  if not exists(select * from People where DepartmentId = (select DepartmentId from deleted))</span><br><span class="line">  begin</span><br><span class="line">delete from Department where DepartmentId = (select DepartmentId from deleted)</span><br><span class="line">  end</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>测试触发器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete Department where DepartmentId = &#x27;001&#x27;</span><br><span class="line">delete Department where DepartmentId = &#x27;002&#x27;</span><br><span class="line">delete Department where DepartmentId = &#x27;003&#x27;</span><br></pre></td></tr></table></figure><p>我们会发现，当部门下没有员工的部门信息可以成功删除，而部门下有员工的部门并没有被删除。</p><p>（4）修改一个部门编号之后，将该部门下所有员工的部门编号同步进行修改</p><p>编写触发器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create trigger tri_UpdateDept on Department</span><br><span class="line">after update</span><br><span class="line">as</span><br><span class="line">update People set DepartmentId = (select DepartmentId from inserted)</span><br><span class="line">where DepartmentId = (select DepartmentId from deleted)</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>测试触发器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update Department set DepartmentId = &#x27;zjb001&#x27; where DepartmentId=&#x27;001&#x27;</span><br></pre></td></tr></table></figure><p>我们会发现不但部门信息表中的部门编号进行了修改，员工信息表中部门编号为001的信息也被一起修改了。</p><h2 id="三、存储过程"><a href="#三、存储过程" class="headerlink" title="三、存储过程"></a>三、存储过程</h2><p>存储过程（Procedure）是SQL语句和流程控制语句的预编译集合。</p><p>（1）没有输入参数，没有输出参数的存储过程。</p><p>定义存储过程实现查询出账户余额最低的银行卡账户信息,显示银行卡号，姓名，账户余额</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--方案一</span><br><span class="line">create proc proc_MinMoneyCard</span><br><span class="line">as</span><br><span class="line">    select top 1 CardNo 银行卡号,RealName 姓名,CardMoney 余额</span><br><span class="line">    from BankCard inner join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">    order by CardMoney asc</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">--方案二：（余额最低，有多个人则显示结果是多个）</span><br><span class="line">create proc proc_MinMoneyCard</span><br><span class="line">as</span><br><span class="line">    select CardNo 银行卡号,RealName 姓名,CardMoney 余额</span><br><span class="line">    from BankCard inner join AccountInfo on BankCard.AccountId = AccountInfo.AccountId</span><br><span class="line">    where CardMoney=(select MIN(CardMoney) from BankCard)</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>执行存储过程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec proc_MinMoneyCard</span><br></pre></td></tr></table></figure><p>（2）有输入参数，没有输出参数的存储过程</p><p>模拟银行卡存钱操作，传入银行卡号，存钱金额，实现存钱操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create proc proc_CunQian</span><br><span class="line">@CardNo varchar(30),</span><br><span class="line">@MoneyInBank money</span><br><span class="line">as</span><br><span class="line">    update BankCard set CardMoney = CardMoney + @MoneyInBank where CardNo = @CardNo</span><br><span class="line">    insert into CardExchange(CardNo,MoneyInBank,MoneyOutBank,ExchangeTime)</span><br><span class="line">    values(@CardNo,@MoneyInBank,0,GETDATE())</span><br><span class="line">--go</span><br></pre></td></tr></table></figure><p>执行存储过程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec proc_CunQian &#x27;6225125478544587&#x27;,3000</span><br></pre></td></tr></table></figure><p>（3）有输入参数，没有输出参数，但是有返回值的存储过程（返回值必须整数）。</p><p>模拟银行卡取钱操作，传入银行卡号，取钱金额，实现取钱操作，取钱成功，返回1，取钱失败返回-1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create proc proc_QuQian</span><br><span class="line">@CardNo varchar(30),</span><br><span class="line">@MoneyOutBank money</span><br><span class="line">as</span><br><span class="line">    update BankCard set CardMoney = CardMoney - @MoneyOutBank where CardNo = @CardNo</span><br><span class="line">    if @@ERROR &lt;&gt; 0</span><br><span class="line">        return -1</span><br><span class="line">    insert into CardExchange(CardNo,MoneyInBank,MoneyOutBank,ExchangeTime)</span><br><span class="line">    values(@CardNo,0,@MoneyOutBank,GETDATE())</span><br><span class="line">    return 1</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>执行存储过程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @returnValue int</span><br><span class="line">exec @returnValue = proc_QuQian &#x27;662018092100000002&#x27;,1000000</span><br><span class="line">print @returnValue</span><br></pre></td></tr></table></figure><p>（4）有输入参数，有输出参数的存储过程</p><p>查询出某时间段的银行存取款信息以及存款总金额，取款总金额，传入开始时间，结束时间，显示存取款交易信息的同时，返回存款总金额，取款总金额。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create proc proc_SelectExchange</span><br><span class="line">    @startTime varchar(20),  --开始时间</span><br><span class="line">    @endTime varchar(20),    --结束时间</span><br><span class="line">    @SumIn money output,     --存款总金额</span><br><span class="line">    @SumOut money output    --取款总金额</span><br><span class="line">as</span><br><span class="line">select @SumIn = (select SUM(MoneyInBank) from CardExchange </span><br><span class="line">where ExchangeTime between @startTime+&#x27; 00:00:00&#x27; and @endTime+&#x27; 23:59:59&#x27;)</span><br><span class="line">select @SumOut = (select SUM(MoneyOutBank) from CardExchange </span><br><span class="line">where ExchangeTime between @startTime+&#x27; 00:00:00&#x27; and @endTime+&#x27; 23:59:59&#x27;)</span><br><span class="line">select * from CardExchange </span><br><span class="line">where ExchangeTime between @startTime+&#x27; 00:00:00&#x27; and @endTime+&#x27; 23:59:59&#x27;</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>执行存储过程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare @SumIn money     --存款总金额</span><br><span class="line">declare @SumOut money   --取款总金额</span><br><span class="line">exec proc_SelectExchange &#x27;2018-1-1&#x27;,&#x27;2018-12-31&#x27;,@SumIn output,@SumOut output</span><br><span class="line">select @SumIn</span><br><span class="line">select @SumOut</span><br></pre></td></tr></table></figure><p>（5）具有同时输入输出参数的存储过程</p><p>密码升级，传入用户名和密码，如果用户名密码正确，并且密码长度&lt;8，自动升级成8位密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--有输入输出参数（密码作为输入参数也作为输出参数）</span><br><span class="line">--密码升级，传入用户名和密码，如果用户名密码正确，并且密码长度&lt;8，自动升级成8位密码</span><br><span class="line">select FLOOR(RAND()*10) --0-9之间随机数</span><br><span class="line">create proc procPwdUpgrade</span><br><span class="line">@cardno nvarchar(20),</span><br><span class="line">@pwd nvarchar(20) output</span><br><span class="line">as</span><br><span class="line">if not exists(select * from BankCard where CardNo=@cardno and CardPwd=@pwd)</span><br><span class="line">set @pwd = &#x27;&#x27;</span><br><span class="line">else</span><br><span class="line">begin</span><br><span class="line">if len(@pwd) &lt; 8</span><br><span class="line">begin</span><br><span class="line">declare @len int = 8- len(@pwd)</span><br><span class="line">declare @i int = 1</span><br><span class="line">while @i &lt;= @len</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">set @pwd = @pwd + cast(FLOOR(RAND()*10) as varchar(1))</span><br><span class="line">set @i = @i+1</span><br><span class="line">end</span><br><span class="line">update BankCard set CardPwd = @pwd where CardNo=@cardno</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">go</span><br><span class="line">declare @pwd nvarchar(20) = &#x27;123456&#x27;</span><br><span class="line">exec procPwdUpgrade &#x27;6225547854125656&#x27;,@pwd output</span><br><span class="line">select @pwd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实施第一站—聚水潭</title>
      <link href="/2021/08/19/jushuitan/"/>
      <url>/2021/08/19/jushuitan/</url>
      
        <content type="html"><![CDATA[<p>聚水潭是由上海聚水潭网络科技有限公司于2014年4月上线的一款商家ERP软件系统。聚水潭提供订单管理、仓储管理、分销管理、协同供应链等功能。采用私有云部署技术，具有高安全性、高稳定性，这是我的实习第一站.</p><h2 id="聚水潭-实施第一站"><a href="#聚水潭-实施第一站" class="headerlink" title="聚水潭-实施第一站"></a>聚水潭-实施第一站</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">聚水潭的白天和夜晚</span><br></pre></td></tr></table></figure><img src="/images/jushuitanday.jpg" width="600" height="400"  > <img src="/images/jushuitanNiht.jpg" width="600" height="400" > More info: 聚水潭可以算是中国最大的电商sass系统，和阿里合作.<br><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">好好活着</span><br></pre></td></tr></table></figure><img src="/images/合租1.jpg" width="600" height="400"  > <img src="/images/合租2.jpg" width="600" height="400"  > <img src="/images/合租4.jpg" width="600" height="400"  > <img src="/images/合租6.jpg" width="600" height="400"  > <img src="/images/合租3.jpg" width="600" height="400"  > <img src="/images/合租5.jpg" width="600" height="400"  > <img src="/images/合租7.jpg" width="600" height="400"  > More info: 和室友合租了一套房子，环境很不错,租金也很贵，在23楼可以看到留香名苑的一整个视野.<br><br><img src="/images/黄昏.jpg" width="600" height="400"  > More info: 那天公寓拍的的黄昏<br><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">只有学习的人才不会被淘汰</span><br></pre></td></tr></table></figure><img src="/images/培训1.jpg" width="600" height="400"  > <img src="/images/培训2.jpg" width="600" height="400"  > <img src="/images/培训3.jpg" width="600" height="400"  > More info: 能不能在聚水潭留下来需要经过很多次考试，三次没考过就会被淘汰，那段时间都是紧绷着神经<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">我们可以好好活着</span><br></pre></td></tr></table></figure><img src="/images/内部环境.jpg" width="600" height="400"  > <img src="/images/内部环境1.jpg" width="600" height="400"  > <img src="/images/内部环境2.jpg" width="600" height="400"  > <img src="/images/内部环境3.jpg" width="600" height="400"  > <img src="/images/内部环境5.jpg" width="600" height="400"  > <p>More info: 公司的内部环境（局部）很不错，一二楼是工作的地方，三楼设有台球室和游戏室已经健身器材</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">感受浙江的美食</span><br></pre></td></tr></table></figure><img src="/images/生活1.jpg" width="600" height="400"  > <img src="/images/生活2.jpg" width="600" height="400"  > <img src="/images/生活3.jpg" width="600" height="400"  > <img src="/images/生活4.jpg" width="600" height="400"  > <img src="/images/生活5.jpg" width="600" height="400"  > <img src="/images/生活6.jpg" width="600" height="400"  > <p>More info: 最开始有点不习惯，总觉得缺少了作为湖南人必不可少的辣味，后面习惯了一段时间也还不错</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">感受闲暇的生活</span><br></pre></td></tr></table></figure><img src="/images/时间.jpg" width="600" height="400"  > <img src="/images/时间1.jpg" width="600" height="400"  > <img src="/images/时间2.jpg" width="600" height="400"  > <img src="/images/时间3.jpg" width="600" height="400"  > <img src="/images/时间4.jpg" width="600" height="400"  > <img src="/images/时间5.jpg" width="600" height="400"  > <img src="/images/时间6.jpg" width="600" height="400"  > <p>More info: 聚水潭的上下班时间很明确（8小时），加班会有加班费，所以我们有较多的时间来感受生活</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
